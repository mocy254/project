{"file_contents":{"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"Poppins\", \"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4100},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/examples/app-sidebar.tsx":{"content":"import { AppSidebar } from '../app-sidebar';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  return (\n    <SidebarProvider>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":295},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Generate from \"@/pages/generate\";\nimport Editor from \"@/pages/editor\";\nimport Settings from \"@/pages/settings\";\nimport Decks from \"@/pages/decks\";\nimport Study from \"@/pages/study\";\n\nfunction AppLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <SidebarProvider>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <div className=\"container max-w-7xl mx-auto p-6 md:p-8\">\n              {children}\n            </div>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction Router() {\n  const [location] = useLocation();\n  const isAppRoute = [\"/dashboard\", \"/generate\", \"/editor\", \"/settings\", \"/decks\", \"/study\"].some(\n    route => location.startsWith(route)\n  );\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          {isAppRoute ? (\n            <AppLayout>\n              <Dashboard />\n            </AppLayout>\n          ) : (\n            <Dashboard />\n          )}\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/generate\">\n        <ProtectedRoute>\n          {isAppRoute ? (\n            <AppLayout>\n              <Generate />\n            </AppLayout>\n          ) : (\n            <Generate />\n          )}\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/editor/:id?\">\n        <ProtectedRoute>\n          {isAppRoute ? (\n            <AppLayout>\n              <Editor />\n            </AppLayout>\n          ) : (\n            <Editor />\n          )}\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/study/:id\">\n        <ProtectedRoute>\n          <Study />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          {isAppRoute ? (\n            <AppLayout>\n              <Settings />\n            </AppLayout>\n          ) : (\n            <Settings />\n          )}\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/decks\">\n        <ProtectedRoute>\n          {isAppRoute ? (\n            <AppLayout>\n              <Decks />\n            </AppLayout>\n          ) : (\n            <Decks />\n          )}\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3491},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/examples/CardEditor.tsx":{"content":"import CardEditor from '../CardEditor';\n\nexport default function CardEditorExample() {\n  return (\n    <div className=\"p-8\">\n      <CardEditor />\n    </div>\n  );\n}\n","size_bytes":163},"client/src/components/examples/FeatureSection.tsx":{"content":"import FeatureSection from '../FeatureSection';\n\nexport default function FeatureSectionExample() {\n  return <FeatureSection />;\n}\n","size_bytes":130},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/examples/DashboardStats.tsx":{"content":"import DashboardStats from '../DashboardStats';\n\nexport default function DashboardStatsExample() {\n  return (\n    <div className=\"p-8\">\n      <DashboardStats />\n    </div>\n  );\n}\n","size_bytes":179},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, json, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - compatible with Supabase Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const decks = pgTable(\"decks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  parentDeckId: varchar(\"parent_deck_id\").references((): any => decks.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  source: text(\"source\").notNull(),\n  sourceType: text(\"source_type\").notNull(),\n  cardTypes: text(\"card_types\").array().notNull(),\n  granularity: integer(\"granularity\").notNull(),\n  customInstructions: text(\"custom_instructions\"),\n  includeSource: text(\"include_source\").notNull().default('false'),\n  createSubdecks: text(\"create_subdecks\").notNull().default('false'),\n  fileUrl: text(\"file_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const flashcards = pgTable(\"flashcards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  deckId: varchar(\"deck_id\").notNull().references(() => decks.id, { onDelete: \"cascade\" }),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  cardType: text(\"card_type\").notNull(),\n  position: integer(\"position\").notNull(),\n  imageUrl: text(\"image_url\"),\n  sourceReference: jsonb(\"source_reference\"),\n  verificationScore: integer(\"verification_score\"),\n  needsReview: boolean(\"needs_review\").notNull().default(false),\n  isLearned: boolean(\"is_learned\").notNull().default(false),\n  learnedAt: timestamp(\"learned_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n});\n\nexport const insertDeckSchema = createInsertSchema(decks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  cardTypes: z.array(z.string()).min(1),\n});\n\nexport const insertFlashcardSchema = createInsertSchema(flashcards).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertDeck = z.infer<typeof insertDeckSchema>;\nexport type Deck = typeof decks.$inferSelect;\nexport type InsertFlashcard = z.infer<typeof insertFlashcardSchema>;\nexport type Flashcard = typeof flashcards.$inferSelect;\n","size_bytes":2847},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/decks.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Plus, FileText, Youtube, Type, MoreVertical, Edit, Trash, Loader2, ChevronRight, ChevronDown, Folder, FolderOpen, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport DeckSettingsDialog from \"@/components/DeckSettingsDialog\";\n\ninterface DeckItemProps {\n  deck: any;\n  subdecks: any[];\n  childDecksMap: Map<string, any[]>;\n  level?: number;\n  onDelete: (deckId: string) => void;\n  expandedDecks: Set<string>;\n  toggleExpanded: (deckId: string) => void;\n}\n\nfunction DeckItem({ deck, subdecks, childDecksMap, level = 0, onDelete, expandedDecks, toggleExpanded }: DeckItemProps) {\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const isExpanded = expandedDecks.has(deck.id);\n  const hasSubdecks = subdecks.length > 0;\n  const isParentDeck = deck.createSubdecks === 'true' || hasSubdecks;\n\n  const getSourceIcon = (sourceType: string) => {\n    switch (sourceType) {\n      case \"document\": return FileText;\n      case \"youtube\": return Youtube;\n      case \"text\": return Type;\n      default: return FileText;\n    }\n  };\n\n  const SourceIcon = getSourceIcon(deck.sourceType);\n\n  return (\n    <div style={{ marginLeft: `${level * 24}px` }}>\n      <Card className=\"hover-elevate transition-all duration-200 mb-2\">\n        <CardHeader className=\"flex flex-row items-start justify-between gap-4 space-y-0 pb-3\">\n          <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n            {hasSubdecks && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"h-6 w-6\"\n                onClick={() => toggleExpanded(deck.id)}\n                data-testid={`button-toggle-${deck.id}`}\n              >\n                {isExpanded ? <ChevronDown className=\"w-4 h-4\" /> : <ChevronRight className=\"w-4 h-4\" />}\n              </Button>\n            )}\n            {isParentDeck ? (\n              isExpanded ? <FolderOpen className=\"w-4 h-4 text-primary\" /> : <Folder className=\"w-4 h-4 text-primary\" />\n            ) : (\n              <SourceIcon className=\"w-4 h-4 text-muted-foreground\" />\n            )}\n            <div className=\"flex-1 min-w-0\">\n              <CardTitle className=\"text-lg font-display truncate\">{deck.title}</CardTitle>\n              <CardDescription className=\"flex items-center gap-2 mt-2 flex-wrap\">\n                <span>{deck.sourceType}</span>\n                {hasSubdecks && (\n                  <>\n                    <span>•</span>\n                    <span className=\"text-xs\">{subdecks.length} subdeck{subdecks.length !== 1 ? 's' : ''}</span>\n                  </>\n                )}\n              </CardDescription>\n            </div>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button size=\"icon\" variant=\"ghost\" data-testid={`button-menu-${deck.id}`}>\n                <MoreVertical className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem asChild>\n                <Link href={`/editor/${deck.id}`} className=\"flex items-center\">\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit Cards\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => setSettingsOpen(true)}\n                data-testid={`menu-settings-${deck.id}`}\n              >\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Settings\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => onDelete(deck.id)}\n                className=\"text-destructive\"\n                data-testid={`menu-delete-${deck.id}`}\n              >\n                <Trash className=\"w-4 h-4 mr-2\" />\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </CardHeader>\n        {!hasSubdecks && (\n          <CardContent className=\"flex items-center gap-4 pt-0\">\n            <Link href={`/editor/${deck.id}`}>\n              <Button variant=\"default\" size=\"sm\" data-testid={`button-study-${deck.id}`}>\n                Study Now\n              </Button>\n            </Link>\n            <span className=\"text-sm text-muted-foreground\">\n              Created {new Date(deck.createdAt).toLocaleDateString()}\n            </span>\n          </CardContent>\n        )}\n      </Card>\n\n      <DeckSettingsDialog\n        open={settingsOpen}\n        onOpenChange={setSettingsOpen}\n        deck={{ ...deck, userId: deck.userId }}\n      />\n\n      <AnimatePresence>\n        {isExpanded && hasSubdecks && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: \"auto\" }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.2 }}\n          >\n            {subdecks.map((subdeck) => (\n              <DeckItem\n                key={subdeck.id}\n                deck={subdeck}\n                subdecks={childDecksMap.get(subdeck.id) || []}\n                childDecksMap={childDecksMap}\n                level={level + 1}\n                onDelete={onDelete}\n                expandedDecks={expandedDecks}\n                toggleExpanded={toggleExpanded}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport default function Decks() {\n  const { user } = useAuth();\n  const userId = user?.id;\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [expandedDecks, setExpandedDecks] = useState<Set<string>>(new Set());\n\n  const { data: decks, isLoading } = useQuery({\n    queryKey: ['/api/decks/user', userId],\n    queryFn: async () => {\n      if (!userId) return [];\n      const res = await apiRequest(\"GET\", `/api/decks/user/${userId}`);\n      return await res.json();\n    },\n    enabled: !!userId,\n  });\n\n  const toggleExpanded = (deckId: string) => {\n    setExpandedDecks(prev => {\n      const next = new Set(prev);\n      if (next.has(deckId)) {\n        next.delete(deckId);\n      } else {\n        next.add(deckId);\n      }\n      return next;\n    });\n  };\n\n  const deleteMutation = useMutation({\n    mutationFn: async (deckId: string) => {\n      await apiRequest(\"DELETE\", `/api/decks/${deckId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/decks/user', userId] });\n      toast({\n        title: \"Deck deleted\",\n        description: \"Your deck has been successfully deleted\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete deck\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Organize decks into parent-child hierarchy\n  const parentDecks = decks?.filter((deck: any) => !deck.parentDeckId) || [];\n  const childDecksMap = new Map<string, any[]>();\n  \n  decks?.forEach((deck: any) => {\n    if (deck.parentDeckId) {\n      if (!childDecksMap.has(deck.parentDeckId)) {\n        childDecksMap.set(deck.parentDeckId, []);\n      }\n      childDecksMap.get(deck.parentDeckId)!.push(deck);\n    }\n  });\n\n  const filteredParentDecks = parentDecks.filter((deck: any) =>\n    deck.title.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-display font-bold\">My Decks</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage all your flashcard collections</p>\n        </div>\n        <Link href=\"/generate\">\n          <Button data-testid=\"button-create-deck\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Deck\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search decks...\"\n          className=\"pl-10\"\n          data-testid=\"input-search\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n        />\n      </div>\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n        </div>\n      ) : filteredParentDecks.length === 0 ? (\n        <Card className=\"p-12 text-center\">\n          <p className=\"text-muted-foreground mb-4\">\n            {searchQuery ? \"No decks match your search\" : \"No decks yet. Create your first flashcard deck!\"}\n          </p>\n          {!searchQuery && (\n            <Link href=\"/generate\">\n              <Button>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Deck\n              </Button>\n            </Link>\n          )}\n        </Card>\n      ) : (\n        <div className=\"space-y-2\">\n          {filteredParentDecks.map((deck: any) => (\n            <DeckItem\n              key={deck.id}\n              deck={deck}\n              subdecks={childDecksMap.get(deck.id) || []}\n              childDecksMap={childDecksMap}\n              onDelete={(deckId) => deleteMutation.mutate(deckId)}\n              expandedDecks={expandedDecks}\n              toggleExpanded={toggleExpanded}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10046},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/GenerationProgressDialog.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Loader2, CheckCircle2, XCircle, Sparkles } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface ProgressUpdate {\n  stage: string;\n  message: string;\n  progress: number;\n  currentStep?: number;\n  totalSteps?: number;\n  cardsGenerated?: number;\n  error?: string;\n}\n\ninterface Props {\n  sessionId: string | null;\n  onComplete?: (deckId?: string) => void;\n  onError?: (error: string) => void;\n  onDismiss?: () => void;\n}\n\nexport default function GenerationProgressDialog({ sessionId, onComplete, onError, onDismiss }: Props) {\n  const [progress, setProgress] = useState<ProgressUpdate | null>(null);\n  const [isComplete, setIsComplete] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    setProgress(null);\n    setIsComplete(false);\n    setError(null);\n  }, [sessionId]);\n\n  useEffect(() => {\n    if (!sessionId) return;\n\n    let intervalId: NodeJS.Timeout;\n    let isActive = true;\n\n    const pollProgress = async () => {\n      try {\n        const res = await fetch(`/api/generation/progress/${sessionId}`);\n        \n        if (!res.ok) {\n          if (res.status === 404) {\n            return;\n          }\n          throw new Error(\"Failed to fetch progress\");\n        }\n\n        const update: ProgressUpdate = await res.json();\n        \n        if (!isActive) return;\n        \n        setProgress(update);\n\n        if (update.stage === \"complete\") {\n          clearInterval(intervalId);\n          setIsComplete(true);\n          \n          const resultRes = await fetch(`/api/generation/result/${sessionId}`);\n          if (!resultRes.ok) {\n            const errorData = await resultRes.json().catch(() => ({ error: \"Failed to retrieve result\" }));\n            throw new Error(errorData.error || \"Failed to retrieve result\");\n          }\n          \n          const result = await resultRes.json();\n          \n          setTimeout(() => {\n            onComplete?.();\n            if (result.deckId) {\n              setLocation(`/editor/${result.deckId}`);\n            }\n          }, 1500);\n        } else if (update.stage === \"error\") {\n          clearInterval(intervalId);\n          setError(update.error || \"Generation failed\");\n          onError?.(update.error || \"Generation failed\");\n        }\n      } catch (err: any) {\n        console.error(\"Error polling progress:\", err);\n        if (isActive && err.message !== \"Failed to fetch progress\") {\n          clearInterval(intervalId);\n          setError(err.message || \"Connection error\");\n          onError?.(err.message || \"Connection error\");\n        }\n      }\n    };\n\n    pollProgress();\n    intervalId = setInterval(pollProgress, 1000);\n\n    return () => {\n      isActive = false;\n      clearInterval(intervalId);\n    };\n  }, [sessionId, onComplete, onError, setLocation]);\n\n  const getStageIcon = () => {\n    if (error) return <XCircle className=\"w-6 h-6 text-destructive\" />;\n    if (isComplete) {\n      return (\n        <motion.div\n          initial={{ scale: 0, rotate: -180 }}\n          animate={{ scale: 1, rotate: 0 }}\n          transition={{ type: \"spring\", stiffness: 200, damping: 15 }}\n        >\n          <CheckCircle2 className=\"w-6 h-6 text-primary\" />\n        </motion.div>\n      );\n    }\n    return <Loader2 className=\"w-6 h-6 animate-spin text-primary\" />;\n  };\n\n  const getStageLabel = (stage: string) => {\n    const labels: Record<string, string> = {\n      extracting: \"Extracting Content\",\n      analyzing: \"Analyzing Structure\",\n      chunking: \"Organizing Content\",\n      generating: \"Generating Flashcards\",\n      saving: \"Saving\",\n      complete: \"Complete\",\n      error: \"Error\"\n    };\n    return labels[stage] || stage;\n  };\n\n  // Sparkle confetti animation positions\n  const sparkles = Array.from({ length: 12 }, (_, i) => ({\n    id: i,\n    x: Math.random() * 400 - 200,\n    y: Math.random() * 300 - 150,\n    delay: Math.random() * 0.3,\n  }));\n\n  return (\n    <Dialog \n      open={!!sessionId} \n      onOpenChange={(open) => {\n        if (!open && error && onDismiss) {\n          onDismiss();\n        }\n      }}\n    >\n      <DialogContent \n        className=\"sm:max-w-md bg-gradient-to-br from-card to-card/80 border-primary/20 overflow-hidden\" \n        onPointerDownOutside={(e) => {\n          if (!error) e.preventDefault();\n        }}\n        onEscapeKeyDown={(e) => {\n          if (!error) e.preventDefault();\n        }}\n        data-testid=\"dialog-generation-progress\"\n      >\n        {/* Success Sparkles Animation */}\n        <AnimatePresence>\n          {isComplete && (\n            <>\n              {sparkles.map((sparkle) => (\n                <motion.div\n                  key={sparkle.id}\n                  className=\"absolute\"\n                  initial={{ \n                    opacity: 0,\n                    scale: 0,\n                    x: 0,\n                    y: 0,\n                  }}\n                  animate={{ \n                    opacity: [0, 1, 1, 0],\n                    scale: [0, 1, 1.2, 0],\n                    x: sparkle.x,\n                    y: sparkle.y,\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    delay: sparkle.delay,\n                    ease: \"easeOut\"\n                  }}\n                  style={{\n                    left: '50%',\n                    top: '30%',\n                  }}\n                >\n                  <Sparkles className=\"w-4 h-4 text-primary\" />\n                </motion.div>\n              ))}\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-primary/20 via-accent/20 to-primary/20\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: [0, 0.5, 0] }}\n                transition={{ duration: 1.5 }}\n              />\n            </>\n          )}\n        </AnimatePresence>\n\n        <DialogHeader className=\"relative z-10\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            {getStageIcon()}\n            <motion.span\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              key={error ? \"error\" : isComplete ? \"complete\" : \"generating\"}\n            >\n              {error ? \"Generation Failed\" : isComplete ? \"Success!\" : \"Generating Flashcards\"}\n            </motion.span>\n          </DialogTitle>\n          <DialogDescription>\n            <motion.span\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n            >\n              {error \n                ? error \n                : isComplete \n                ? \"Your flashcards are ready!\" \n                : \"Please wait while we process your content...\"}\n            </motion.span>\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 py-4 relative z-10\">\n          {progress && !error && (\n            <>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">\n                    {getStageLabel(progress.stage)}\n                  </span>\n                  <motion.span \n                    className=\"font-medium\"\n                    key={progress.progress}\n                    initial={{ scale: 1.2 }}\n                    animate={{ scale: 1 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    {progress.progress}%\n                  </motion.span>\n                </div>\n                <Progress value={progress.progress} className=\"h-2\" data-testid=\"progress-bar\" />\n              </div>\n              \n              <div className=\"space-y-1\">\n                <motion.p \n                  className=\"text-sm text-foreground\" \n                  data-testid=\"text-progress-message\"\n                  initial={{ opacity: 0, x: -10 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  key={progress.message}\n                >\n                  {progress.message}\n                </motion.p>\n                {progress.totalSteps && progress.currentStep && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    Processing section {progress.currentStep} of {progress.totalSteps}\n                  </p>\n                )}\n                {progress.cardsGenerated !== undefined && progress.cardsGenerated > 0 && (\n                  <motion.p \n                    className=\"text-xs text-primary font-medium\" \n                    data-testid=\"text-cards-generated\"\n                    initial={{ scale: 0.9 }}\n                    animate={{ scale: 1 }}\n                    key={progress.cardsGenerated}\n                  >\n                    🎉 {progress.cardsGenerated} flashcards generated!\n                  </motion.p>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9268},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/examples/FlashcardPreview.tsx":{"content":"import FlashcardPreview from '../FlashcardPreview';\n\nexport default function FlashcardPreviewExample() {\n  return (\n    <div className=\"p-8\">\n      <FlashcardPreview\n        question=\"What is the powerhouse of the cell?\"\n        answer=\"Mitochondria\"\n        cardType=\"qa\"\n      />\n    </div>\n  );\n}\n","size_bytes":300},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"design_guidelines.md":{"content":"# FlashGenius Design Guidelines\n\n## Design Approach\n\n**Selected Approach**: Design System-Inspired (Notion + Linear)\n**Justification**: Educational productivity tools require clarity, consistency, and efficiency. FlashGenius combines Notion's clean card-based layouts with Linear's refined typography and interaction patterns, optimized for focused learning experiences.\n\n**Core Principles**:\n- Clarity over decoration: Every visual element serves learning efficiency\n- Progressive disclosure: Advanced features revealed contextually\n- Instant feedback: All interactions provide immediate visual confirmation\n- Focused workspace: Minimize distractions during study sessions\n\n## Color System\n\n**Brand & UI Colors** (HSL format - space separated):\n- Primary: 239 84% 67% (indigo - main CTAs, active states)\n- Secondary: 258 90% 66% (purple - premium features, gradients)\n- Success: 158 64% 52% (emerald - generation complete, saved states)\n- Background: 210 40% 98% (slate-50 - main canvas)\n- Surface: 0 0% 100% (white - cards, modals)\n- Text Primary: 215 25% 27% (slate-800 - headings, body)\n- Text Secondary: 215 16% 47% (slate-600 - labels, meta)\n- Accent: 38 92% 50% (amber - highlights, premium badges)\n- Border: 214 32% 91% (slate-200 - dividers, card edges)\n- Hover: 221 83% 53% (indigo-600 - interactive states)\n\n**Dark Mode** (for study mode):\n- Background: 222 47% 11% (slate-900)\n- Surface: 217 33% 17% (slate-800)\n- Text Primary: 210 40% 98% (slate-50)\n- Border: 215 28% 17% (slate-700)\n\n**Gradients** (use sparingly):\n- Hero/Premium: `linear-gradient(135deg, hsl(239 84% 67%), hsl(258 90% 66%))`\n- Success States: `linear-gradient(to right, hsl(158 64% 52%), hsl(142 71% 45%))`\n\n## Typography\n\n**Font Families**:\n- Primary: Inter (body text, UI elements, forms)\n- Display: Poppins (headings, hero, feature titles)\n\n**Type Scale**:\n- Hero: Poppins 3.5rem/1.1 (font-bold)\n- H1: Poppins 2.5rem/1.2 (font-bold)\n- H2: Poppins 2rem/1.3 (font-semibold)\n- H3: Poppins 1.5rem/1.4 (font-semibold)\n- Body Large: Inter 1.125rem/1.6 (font-normal)\n- Body: Inter 1rem/1.6 (font-normal)\n- Small: Inter 0.875rem/1.5 (font-medium)\n- Caption: Inter 0.75rem/1.4 (font-medium, text-secondary)\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 8, 12, 16, 24\n- Component padding: p-4 to p-8\n- Section spacing: py-12 to py-24\n- Card gaps: gap-4 to gap-8\n- Form field spacing: space-y-4\n\n**Grid Structure**:\n- Dashboard: 240px fixed sidebar + flex-1 main content\n- Content max-width: max-w-7xl (1280px)\n- Cards: max-w-2xl for flashcard editor, max-w-4xl for generation form\n- Form inputs: Full width within containers\n\n**Breakpoints**:\n- Mobile: base (stack all columns)\n- Tablet: md: (2-column layouts start)\n- Desktop: lg: (full sidebar, 3-column grids)\n\n## Component Library\n\n### Navigation\n**Sidebar** (Desktop):\n- Fixed 240px width, full height\n- Logo + app name at top (p-6)\n- Navigation items with icons (Heroicons), hover bg-slate-100, active bg-indigo-50 with indigo-600 text\n- Bottom section for user profile + settings\n\n**Top Bar** (Mobile):\n- Hamburger menu, centered logo, profile icon\n- Slides in sidebar overlay on tap\n\n### Cards & Containers\n**Flashcard Display**:\n- min-h-64, perspective effect for flip animation\n- Shadow: shadow-lg on hover, shadow-xl when active\n- Border: 2px solid border-slate-200, rounded-xl\n- Question/Answer sides with centered text, p-8\n- Flip button positioned bottom-right\n\n**Generation Form Card**:\n- bg-white, rounded-xl, shadow-md, p-8\n- Input sections with clear labels (text-sm font-medium text-slate-700)\n- Tabbed interface for input methods (Text/Document/YouTube)\n- Customization options in expandable sections\n\n**Dashboard Cards**:\n- Grid layout (grid-cols-1 md:grid-cols-2 lg:grid-cols-3, gap-6)\n- Hover effect: translate-y-[-4px] + shadow increase\n- Deck preview with card count, last modified date\n- Quick action buttons on hover overlay\n\n### Forms & Inputs\n**Text Inputs**:\n- h-12, px-4, rounded-lg, border-2 border-slate-200\n- Focus: border-indigo-500, ring-2 ring-indigo-100\n- Placeholder: text-slate-400\n\n**Textareas**:\n- min-h-32, p-4, same border/focus as inputs\n- Resize-y for user control\n\n**Select Dropdowns**:\n- Custom styled with Heroicons chevron-down\n- Options with hover bg-slate-100\n\n**File Upload**:\n- Dashed border zone with upload icon\n- Drag-over state: bg-indigo-50, border-indigo-300\n- File list with delete option\n\n**Customization Controls**:\n- Card Type: Radio group with icon + label (Q&A, Cloze Deletion, Reverse)\n- Granularity: Slider with labels (Low/Medium/High)\n- Extra Notes: Toggle switch\n\n### Buttons\n**Primary**: bg-indigo-600 text-white, hover:bg-indigo-700, h-12, px-6, rounded-lg, font-semibold\n**Secondary**: border-2 border-slate-300 text-slate-700, hover:bg-slate-50\n**Success**: bg-emerald-500, hover:bg-emerald-600 (for \"Generate\" action)\n**Outline on Images**: backdrop-blur-md bg-white/10 border-2 border-white/20 text-white\n\n### Editor Interface\n**Card List** (Left panel):\n- Scrollable list, gap-2\n- Each card: p-4, border-l-4 (color by type), hover bg-slate-50\n- Selected card: bg-indigo-50, border-l-indigo-600\n\n**Edit Panel** (Right):\n- Large editable text areas for question/answer\n- Delete confirmation modal\n- Save indicator (auto-save with spinner)\n\n### Data Display\n**Generation History**:\n- Table with columns: Date, Source, Cards, Actions\n- Row hover: bg-slate-50\n- Action buttons: icon-only, text-slate-600\n\n**Statistics Cards**:\n- Gradient backgrounds (light indigo/purple)\n- Large number (text-4xl font-bold)\n- Label below (text-sm text-slate-600)\n\n### Feedback Elements\n**Loading States**:\n- Spinner: animated spin, text-indigo-600\n- Skeleton screens for card previews\n\n**Notifications/Toasts**:\n- Slide in from top-right\n- Success: bg-emerald-50 border-l-4 border-emerald-500\n- Error: bg-red-50 border-l-4 border-red-500\n\n**Empty States**:\n- Centered icon (Heroicons, large, text-slate-300)\n- Heading + description\n- CTA button to create first deck\n\n## Images\n\n**Hero Section**: Full-width gradient background (indigo to purple) with floating card mockups showing flashcard examples. Image should be abstract/illustrative showing the concept of learning with cards, NOT stock photos of students.\n\n**Feature Illustrations**: Custom or sourced illustrations for:\n- Multi-format input (document icons, YouTube logo)\n- AI generation (brain/sparkle iconography)\n- Study modes (flip animation preview)\n\n**Dashboard**: No hero image needed; focus on functional content cards and data visualization.\n\n## Animation Constraints\n\n**Use Sparingly**:\n- Flashcard flip: 600ms 3D rotate transform\n- Card hover: 200ms translate + shadow transition\n- Button states: 150ms background/border\n- Page transitions: 300ms fade\n- Loading spinners only when necessary\n\n**Avoid**: Parallax, scroll-driven animations, gratuitous micro-interactions that distract from studying.","size_bytes":6873},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\nimport { get_encoding } from \"tiktoken\";\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\n// Initialize tiktoken encoder for accurate token counting (cl100k_base encoding used by GPT-4/Gemini)\nconst encoder = get_encoding(\"cl100k_base\");\n\n// Tier-based configuration\nconst GEMINI_TIER = process.env.GEMINI_TIER || \"1\";\nconst TIER_CONFIG = {\n  \"1\": {\n    // Tier 1 - Conservative settings for rate limits\n    maxConcurrency: 5,\n    retryAttempts: 2,\n    retryDelay: 2000,\n    timeouts: {\n      small: 120000,  // 2 minutes\n      medium: 210000, // 3.5 minutes\n      large: 300000   // 5 minutes\n    },\n    thinkingMode: false,\n    thinkingBudget: 0\n  },\n  \"2+\": {\n    // Tier 2+ - Optimized settings for higher rate limits\n    maxConcurrency: 20,\n    retryAttempts: 3,\n    retryDelay: 1000,\n    timeouts: {\n      small: 60000,   // 1 minute\n      medium: 120000, // 2 minutes\n      large: 180000   // 3 minutes\n    },\n    thinkingMode: true,\n    thinkingBudget: 8192 // Default high budget for medical accuracy\n  }\n};\n\n// Normalize tier: treat any tier >= 2 as Tier 2+\nconst normalizedTier = parseInt(GEMINI_TIER) >= 2 ? \"2+\" : \"1\";\nconst config = TIER_CONFIG[normalizedTier as keyof typeof TIER_CONFIG];\nconsole.log(`Gemini API using Tier ${GEMINI_TIER} (normalized to ${normalizedTier}) configuration:`, {\n  maxConcurrency: config.maxConcurrency,\n  retryAttempts: config.retryAttempts,\n  thinkingMode: config.thinkingMode\n});\n\n// Timeout wrapper for async operations\nasync function withTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n  errorMessage: string = \"Operation timed out\"\n): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error(errorMessage)), timeoutMs)\n    ),\n  ]);\n}\n\n// Retry wrapper with exponential backoff (uses tier configuration)\nasync function withRetry<T>(\n  fn: () => Promise<T>,\n  maxRetries: number = config.retryAttempts,\n  initialDelayMs: number = config.retryDelay\n): Promise<T> {\n  let lastError: Error | undefined;\n  \n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt < maxRetries) {\n        const delay = initialDelayMs * Math.pow(2, attempt);\n        console.log(`Retry attempt ${attempt + 1} after ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  throw lastError || new Error(\"Max retries exceeded\");\n}\n\nexport interface FlashcardGenerationOptions {\n  content: string;\n  cardTypes: string[];\n  granularity: number;\n  customInstructions: string;\n  createSubdecks?: boolean;\n  images?: Array<{imageUrl: string, pageNumber?: number}>;\n  onProgress?: (update: {\n    stage: string;\n    message: string;\n    progress: number;\n    currentStep?: number;\n    totalSteps?: number;\n    cardsGenerated?: number;\n  }) => void;\n}\n\nexport interface GeneratedFlashcard {\n  question: string;\n  answer: string;\n  cardType: \"qa\" | \"cloze\" | \"reverse\";\n  subtopic?: string;\n  imageUrl?: string;\n  sourceExcerpt?: string;\n  verificationScore?: number;\n  needsReview?: boolean;\n}\n\nexport interface SubdeckGroup {\n  subtopic: string;\n  flashcards: GeneratedFlashcard[];\n}\n\ninterface TopicOutline {\n  topics: Array<{\n    title: string;\n    subtopics?: string[];\n  }>;\n}\n\ninterface SemanticChunk {\n  content: string;\n  topics: string[];\n  context: string;\n}\n\nfunction countTokens(text: string): number {\n  try {\n    const tokens = encoder.encode(text);\n    return tokens.length;\n  } catch (error) {\n    console.error(\"Error counting tokens, falling back to estimation:\", error);\n    // Fallback to estimation if tiktoken fails\n    // Use 3.5 chars/token for better accuracy with technical/medical content\n    return Math.ceil(text.length / 3.5);\n  }\n}\n\n// Get overlap text (last ~targetTokens from the given text)\nfunction getOverlapText(text: string, targetTokens: number = 200): string {\n  if (!text.trim()) return '';\n  \n  const lines = text.split('\\n');\n  const overlapLines: string[] = [];\n  let overlapTokens = 0;\n  const minLines = 3; // Ensure minimum context even if it exceeds target\n  \n  // Work backwards from the end to collect ~targetTokens\n  for (let i = lines.length - 1; i >= 0; i--) {\n    const line = lines[i];\n    const lineTokens = countTokens(line);\n    \n    // Stop if we exceed target AND have enough lines for context\n    if (overlapTokens + lineTokens > targetTokens && overlapLines.length >= minLines) {\n      break;\n    }\n    \n    overlapLines.unshift(line);\n    overlapTokens += lineTokens;\n  }\n  \n  return overlapLines.join('\\n');\n}\n\n// Simple fact verification: check if key medical terms from the answer exist in the source\nfunction verifyFlashcard(flashcard: GeneratedFlashcard, sourceChunk: string): { score: number; needsReview: boolean } {\n  const answer = flashcard.answer.toLowerCase();\n  const source = sourceChunk.toLowerCase();\n  \n  // Extract key medical terms (words 4+ chars, excluding common words)\n  const commonWords = new Set(['that', 'this', 'with', 'from', 'have', 'been', 'were', 'will', 'what', 'when', 'where', 'which', 'their', 'there', 'these', 'those', 'would', 'could', 'should', 'about', 'after', 'before', 'through', 'during', 'between']);\n  \n  const keyTerms = answer\n    .split(/\\s+/)\n    .filter(word => {\n      const cleaned = word.replace(/[^\\w]/g, '');\n      return cleaned.length >= 4 && !commonWords.has(cleaned);\n    })\n    .map(word => word.replace(/[^\\w]/g, ''));\n  \n  if (keyTerms.length === 0) {\n    // No key terms to verify, consider it verified\n    return { score: 100, needsReview: false };\n  }\n  \n  // Check how many key terms appear in the source\n  const foundTerms = keyTerms.filter(term => source.includes(term));\n  const verificationScore = Math.round((foundTerms.length / keyTerms.length) * 100);\n  \n  // Flag for review if less than 70% of key terms are found\n  const needsReview = verificationScore < 70;\n  \n  return { score: verificationScore, needsReview };\n}\n\nasync function extractTopicOutline(content: string): Promise<TopicOutline> {\n  const estimatedTokens = countTokens(content);\n  const maxTokensPerPass = 80000;\n  \n  if (estimatedTokens <= maxTokensPerPass) {\n    return extractTopicsFromChunk(content);\n  }\n\n  console.log(`Document too large for single analysis. Processing in ${Math.ceil(estimatedTokens / maxTokensPerPass)} passes...`);\n  \n  const lines = content.split('\\n');\n  const chunks: string[] = [];\n  let currentChunk = '';\n  let currentTokens = 0;\n  \n  for (const line of lines) {\n    const lineTokens = countTokens(line);\n    \n    if (currentTokens + lineTokens > maxTokensPerPass && currentChunk) {\n      chunks.push(currentChunk.trim());\n      \n      // Add 200-token overlap for context continuity\n      const overlap = getOverlapText(currentChunk, 200);\n      currentChunk = overlap + (overlap ? '\\n' : '') + line + '\\n';\n      currentTokens = countTokens(currentChunk);\n    } else {\n      currentChunk += line + '\\n';\n      currentTokens += lineTokens;\n    }\n  }\n  \n  if (currentChunk.trim()) {\n    chunks.push(currentChunk.trim());\n  }\n\n  const allTopics: Array<{ title: string; subtopics?: string[]; sectionIndex: number }> = [];\n  \n  for (let i = 0; i < chunks.length; i++) {\n    console.log(`Analyzing section ${i + 1}/${chunks.length} for topics...`);\n    const chunkOutline = await extractTopicsFromChunk(chunks[i]);\n    // Tag each topic with its section index to prevent merging distinct sections\n    allTopics.push(...chunkOutline.topics.map(t => ({ ...t, sectionIndex: i })));\n  }\n\n  // Deduplicate using both title AND section index to preserve distinct sections\n  const uniqueTopics = new Map<string, { title: string; subtopics?: string[]; sectionIndex: number }>();\n  for (const topic of allTopics) {\n    const key = `${topic.title}__section${topic.sectionIndex}`;\n    if (!uniqueTopics.has(key)) {\n      uniqueTopics.set(key, topic);\n    } else if (topic.subtopics && topic.subtopics.length > 0) {\n      const existing = uniqueTopics.get(key)!;\n      if (!existing.subtopics) existing.subtopics = [];\n      // Deduplicate subtopics using Set\n      const existingSet = new Set(existing.subtopics);\n      topic.subtopics.forEach(sub => existingSet.add(sub));\n      existing.subtopics = Array.from(existingSet);\n    }\n  }\n\n  return {\n    topics: Array.from(uniqueTopics.values()).map((topic, index) => ({\n      title: topic.title,\n      // Ensure final deduplication of subtopics\n      subtopics: topic.subtopics ? Array.from(new Set(topic.subtopics)) : undefined\n    }))\n  };\n}\n\nasync function extractTopicsFromChunk(content: string): Promise<TopicOutline> {\n  try {\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        temperature: 0.1,\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            topics: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  title: { type: \"string\" },\n                  subtopics: {\n                    type: \"array\",\n                    items: { type: \"string\" }\n                  }\n                },\n                required: [\"title\"]\n              }\n            }\n          },\n          required: [\"topics\"]\n        }\n      },\n      contents: `Analyze this document section and extract ALL major topics and subtopics.\n\nFor medical/educational content, identify:\n- Disease/condition names (e.g., \"Diabetes Mellitus\", \"Heart Failure\")\n- Chapter/section headings\n- Pathophysiology sections\n- Clinical features/symptoms sections\n- Diagnostic criteria sections\n- Treatment/management sections\n- Complications sections\n\nBe comprehensive - extract EVERY distinct topic mentioned.\n\nContent:\n${content}`\n    });\n\n    const rawText = response.text;\n    if (!rawText) {\n      throw new Error(\"Empty response from topic extraction\");\n    }\n    const outline = JSON.parse(rawText);\n    \n    // Validate that we got topics\n    if (!outline || !outline.topics || outline.topics.length === 0) {\n      console.warn(\"⚠️  Topic extraction returned 0 topics - will use simple chunking\");\n    }\n    \n    return outline as TopicOutline;\n  } catch (error) {\n    console.error(\"❌ Topic extraction FAILED:\", error);\n    console.error(\"Error details:\", error instanceof Error ? error.message : error);\n    console.warn(\"⚠️  Falling back to simple chunking without topic detection\");\n    console.warn(\"This may result in less optimal chunk boundaries but generation will continue\");\n    return { topics: [] };\n  }\n}\n\nfunction chunkContentByTopics(content: string, outline: TopicOutline, maxTokens: number = 100000): SemanticChunk[] {\n  const estimatedTokens = countTokens(content);\n  \n  if (estimatedTokens <= maxTokens) {\n    return [{\n      content,\n      topics: outline.topics.map(t => t.title),\n      context: outline.topics.length > 0 \n        ? `Topics covered: ${outline.topics.map(t => t.title).slice(0, 3).join(', ')}${outline.topics.length > 3 ? '...' : ''}`\n        : \"Complete document\"\n    }];\n  }\n\n  const lines = content.split('\\n');\n  const chunks: SemanticChunk[] = [];\n  \n  if (outline.topics.length === 0) {\n    console.log(\"No topics detected, using simple chunking with overlap...\");\n    let currentChunk = '';\n    let currentTokens = 0;\n    \n    for (const line of lines) {\n      const lineTokens = countTokens(line);\n      \n      if (currentTokens + lineTokens > maxTokens && currentChunk) {\n        chunks.push({\n          content: currentChunk.trim(),\n          topics: [\"Document section\"],\n          context: \"Part of larger document\"\n        });\n        \n        // Get 200-token overlap from previous chunk for context continuity\n        const overlap = getOverlapText(currentChunk, 200);\n        \n        currentChunk = overlap + (overlap ? '\\n' : '') + line + '\\n';\n        currentTokens = countTokens(currentChunk);\n      } else {\n        currentChunk += line + '\\n';\n        currentTokens += lineTokens;\n      }\n    }\n    \n    if (currentChunk.trim()) {\n      chunks.push({\n        content: currentChunk.trim(),\n        topics: [\"Document section\"],\n        context: \"Part of larger document\"\n      });\n    }\n    \n    return chunks;\n  }\n\n  const topicPatterns = outline.topics.map(t => ({\n    title: t.title,\n    pattern: new RegExp(t.title.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i'),\n    subtopics: t.subtopics || []\n  }));\n\n  let currentChunk = '';\n  let currentTokens = 0;\n  let currentTopics: string[] = [];\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    const lineTokens = countTokens(line);\n    \n    let matchedTopic = '';\n    let matchedSubtopic = '';\n    let isNewTopicBoundary = false;\n    \n    for (const { title, pattern, subtopics } of topicPatterns) {\n      if (pattern.test(line)) {\n        matchedTopic = title;\n        isNewTopicBoundary = currentTopics.length === 0 || currentTopics[0] !== title;\n        break;\n      }\n      \n      for (const subtopic of subtopics) {\n        const subtopicPattern = new RegExp(subtopic.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n        if (subtopicPattern.test(line)) {\n          matchedTopic = title;\n          matchedSubtopic = subtopic;\n          const currentContext = currentTopics.join(' - ');\n          const newContext = `${title} - ${subtopic}`;\n          isNewTopicBoundary = currentContext !== newContext;\n          break;\n        }\n      }\n      if (matchedTopic) break;\n    }\n\n    if (isNewTopicBoundary && currentChunk.trim()) {\n      chunks.push({\n        content: currentChunk.trim(),\n        topics: [...currentTopics],\n        context: currentTopics.length > 0 \n          ? `Topics: ${currentTopics.join(' - ')}`\n          : \"Document section\"\n      });\n      \n      // Add 200-token overlap for context continuity at topic boundaries\n      const overlap = getOverlapText(currentChunk, 200);\n      currentChunk = overlap + (overlap ? '\\n' : '');\n      currentTokens = countTokens(currentChunk);\n      currentTopics = [];\n    }\n\n    if (matchedTopic && isNewTopicBoundary) {\n      currentTopics = matchedSubtopic \n        ? [matchedTopic, matchedSubtopic]\n        : [matchedTopic];\n    }\n\n    if (currentTokens + lineTokens > maxTokens && currentChunk) {\n      chunks.push({\n        content: currentChunk.trim(),\n        topics: [...currentTopics],\n        context: currentTopics.length > 0 \n          ? `Topics: ${currentTopics.join(' - ')}`\n          : \"Document section\"\n      });\n      \n      // Add 200-token overlap for context continuity at size boundaries\n      const overlap = getOverlapText(currentChunk, 200);\n      currentChunk = overlap + (overlap ? '\\n' : '') + line + '\\n';\n      currentTokens = countTokens(currentChunk);\n    } else {\n      currentChunk += line + '\\n';\n      currentTokens += lineTokens;\n    }\n  }\n\n  if (currentChunk.trim()) {\n    chunks.push({\n      content: currentChunk.trim(),\n      topics: [...currentTopics],\n      context: currentTopics.length > 0 \n        ? `Topics: ${currentTopics.join(' - ')}`\n        : \"Final section\"\n    });\n  }\n\n  return chunks;\n}\n\nexport async function generateFlashcards(\n  options: FlashcardGenerationOptions\n): Promise<GeneratedFlashcard[]> {\n  const { content, cardTypes, granularity, customInstructions, onProgress, createSubdecks, images } = options;\n\n  console.log(`=== Starting flashcard generation ===`);\n  console.log(`Content length: ${content.length} characters`);\n  console.log(`Card types: ${JSON.stringify(cardTypes)}`);\n  console.log(`Granularity: ${granularity}`);\n  \n  const estimatedTokens = countTokens(content);\n  console.log(`Estimated tokens: ${estimatedTokens}`);\n  \n  if (estimatedTokens > 100000) {\n    console.log(`Large document detected (${Math.floor(estimatedTokens / 1000)}k tokens). Extracting topic structure...`);\n    onProgress?.({\n      stage: \"analyzing\",\n      message: \"Analyzing document structure...\",\n      progress: 10\n    });\n    \n    const outline = await extractTopicOutline(content);\n    console.log(`Found ${outline.topics.length} main topics`);\n    \n    onProgress?.({\n      stage: \"chunking\",\n      message: `Found ${outline.topics.length} topics, splitting document...`,\n      progress: 20\n    });\n    \n    const semanticChunks = chunkContentByTopics(content, outline, 100000);\n    console.log(`Split into ${semanticChunks.length} semantic chunks`);\n    \n    onProgress?.({\n      stage: \"generating\",\n      message: `Processing ${semanticChunks.length} sections in parallel...`,\n      progress: 25,\n      totalSteps: semanticChunks.length\n    });\n    \n    const allFlashcards: GeneratedFlashcard[] = [];\n    const failedChunks: number[] = [];\n    const emptyChunks: number[] = [];\n    \n    // Calculate dynamic concurrency based on document size and tier\n    // Tier 1: Conservative (max 5 concurrent)\n    // Tier 2+: Aggressive (max 20 concurrent)\n    // Logic: More chunks = MORE parallelism (up to tier limit)\n    const CONCURRENCY = Math.min(\n      config.maxConcurrency,\n      semanticChunks.length <= 5 ? Math.min(3, semanticChunks.length) :  // Small docs: 3 max\n      semanticChunks.length <= 15 ? Math.floor(config.maxConcurrency * 0.6) :  // Medium docs: 60% of max (12 for T2+)\n      config.maxConcurrency  // Large docs: Use full tier limit (20 for T2+)\n    );\n    \n    console.log(`Using concurrency level: ${CONCURRENCY} (Tier ${GEMINI_TIER}, ${semanticChunks.length} chunks)`);\n    \n    const chunkGroups: SemanticChunk[][] = [];\n    \n    for (let i = 0; i < semanticChunks.length; i += CONCURRENCY) {\n      chunkGroups.push(semanticChunks.slice(i, i + CONCURRENCY));\n    }\n    \n    let processedChunks = 0;\n    \n    for (const group of chunkGroups) {\n      const promises = group.map(async (chunk, idx) => {\n        const chunkIndex = processedChunks + idx;\n        console.log(`Processing chunk ${chunkIndex + 1}/${semanticChunks.length} - ${chunk.context}`);\n        \n        // Retry failed chunks using tier configuration\n        const MAX_CHUNK_RETRIES = config.retryAttempts;\n        let lastError: Error | undefined;\n        \n        for (let attempt = 0; attempt <= MAX_CHUNK_RETRIES; attempt++) {\n          try {\n            if (attempt > 0) {\n              console.log(`Retrying chunk ${chunkIndex + 1} (attempt ${attempt + 1}/${MAX_CHUNK_RETRIES + 1})...`);\n            }\n            \n            const chunkFlashcards = await generateFlashcardsForChunk({\n              content: chunk.content,\n              cardTypes,\n              granularity,\n              customInstructions,\n              createSubdecks,\n              images\n            }, chunk.context);\n            \n            if (chunkFlashcards.length === 0) {\n              console.warn(`⚠️  Chunk ${chunkIndex + 1} produced 0 flashcards - may indicate an issue or very low coverage level`);\n              emptyChunks.push(chunkIndex + 1);\n            } else {\n              console.log(`✓ Chunk ${chunkIndex + 1} generated ${chunkFlashcards.length} flashcards`);\n            }\n            \n            return chunkFlashcards;\n          } catch (error) {\n            lastError = error as Error;\n            if (attempt < MAX_CHUNK_RETRIES) {\n              // Exponential backoff: delay doubles with each attempt (1x, 2x, 4x...)\n              const backoffDelay = config.retryDelay * Math.pow(2, attempt);\n              console.warn(`⚠️  Chunk ${chunkIndex + 1} failed, will retry in ${backoffDelay}ms...`);\n              await new Promise(resolve => setTimeout(resolve, backoffDelay));\n            }\n          }\n        }\n        \n        // All retries failed\n        console.error(`❌ ERROR: Chunk ${chunkIndex + 1} failed after ${MAX_CHUNK_RETRIES + 1} attempts:`, lastError);\n        console.error(`Error details:`, lastError instanceof Error ? lastError.message : lastError);\n        console.error(`Error stack:`, lastError instanceof Error ? lastError.stack : 'No stack trace');\n        failedChunks.push(chunkIndex + 1);\n        // Return empty array on error, but don't fail entire generation\n        return [];\n      });\n      \n      const results = await Promise.all(promises);\n      results.forEach(cards => allFlashcards.push(...cards));\n      \n      processedChunks += group.length;\n      const progress = 25 + ((processedChunks / semanticChunks.length) * 65);\n      \n      onProgress?.({\n        stage: \"generating\",\n        message: `Processed ${processedChunks}/${semanticChunks.length} sections`,\n        progress: Math.round(progress),\n        currentStep: processedChunks,\n        totalSteps: semanticChunks.length,\n        cardsGenerated: allFlashcards.length\n      });\n    }\n    \n    // Report summary\n    console.log(`\\n=== CHUNK PROCESSING SUMMARY ===`);\n    console.log(`Total chunks: ${semanticChunks.length}`);\n    console.log(`Total flashcards generated: ${allFlashcards.length}`);\n    \n    if (failedChunks.length > 0) {\n      console.error(`❌ ${failedChunks.length} chunk(s) FAILED: ${failedChunks.join(', ')}`);\n      console.error(`These chunks were skipped - some content may be missing from flashcards`);\n    }\n    \n    if (emptyChunks.length > 0) {\n      console.warn(`⚠️  ${emptyChunks.length} chunk(s) produced 0 cards: ${emptyChunks.join(', ')}`);\n      console.warn(`This may be normal for low coverage levels, or could indicate an issue`);\n    }\n    \n    if (failedChunks.length === 0 && emptyChunks.length === 0) {\n      console.log(`✓ All chunks processed successfully`);\n    }\n    \n    return allFlashcards;\n  }\n  \n  onProgress?.({\n    stage: \"generating\",\n    message: \"Generating flashcards...\",\n    progress: 30\n  });\n  \n  return generateFlashcardsForChunk(options, \"Complete document\");\n}\n\nasync function generateFlashcardsForChunk(\n  options: FlashcardGenerationOptions,\n  chunkContext: string = \"Document content\"\n): Promise<GeneratedFlashcard[]> {\n  const { content, cardTypes, granularity, customInstructions, createSubdecks, images } = options;\n  \n  // Log image availability for this chunk\n  if (images && images.length > 0) {\n    console.log(`Chunk has ${images.length} images available - imageUrl will be REQUIRED in schema`);\n  }\n\n  // Importance thresholds for each coverage level\n  const importanceMapping = {\n    1: { threshold: \"9-10\", description: \"Only CORE PRINCIPLES (definitions, main classifications)\" },\n    2: { threshold: \"8-10\", description: \"Core + KEY MECHANISMS (main pathways, primary causes)\" },\n    3: { threshold: \"7-10\", description: \"Key ideas + MODERATE DETAILS (main symptoms, classifications)\" },\n    4: { threshold: \"6-10\", description: \"Balanced coverage (essential facts + supporting detail)\" },\n    5: { threshold: \"5-10\", description: \"Detailed (secondary mechanisms, exceptions, associations)\" },\n    6: { threshold: \"4-10\", description: \"Near-comprehensive (most concepts, facts, numbers)\" },\n    7: { threshold: \"1-10\", description: \"Every detail (all sentences, facts, numbers, concepts)\" }\n  };\n\n  const currentLevel = importanceMapping[granularity as keyof typeof importanceMapping];\n  \n  // Granularity: 1-7 scale with importance-based filtering\n  const coverageGuidance = \n    granularity === 1 ? \"Level 1 – Absolute Essentials Only (Importance 9-10): Include ONLY facts of critical importance (core definitions, main classifications). Skip ALL mechanisms, examples, numbers, symptoms, treatments, and complications. Generate 3-5 cards per major topic maximum.\" :\n    granularity === 2 ? \"Level 2 – Core Concepts (Importance 8-10): Include critical definitions AND the single most important mechanism/pathway per concept. Skip examples, clinical features, numbers, and treatment details. Generate 5-10 cards per major topic.\" :\n    granularity === 3 ? \"Level 3 – Key Ideas (Importance 7-10): Include main concepts, primary mechanisms, AND major clinical features/symptoms. Skip rare cases, detailed treatments, and extensive lists. Generate 10-15 cards per major topic.\" :\n    granularity === 4 ? \"Level 4 – Balanced (Importance 6-10): Include essential facts, mechanisms, main symptoms, AND key treatment principles. Add important numbers that aid diagnosis. Skip rare complications and excessive detail.\" :\n    granularity === 5 ? \"Level 5 – Detailed (Importance 5-10): Include all main content PLUS secondary mechanisms, important exceptions, clinical variations, and treatment details. Capture most key information while avoiding trivial facts.\" :\n    granularity === 6 ? \"Level 6 – Near-Comprehensive (Importance 4-10): Include almost every concept, fact, number, and detail. Only skip purely stylistic or redundant information. Create multiple cards per complex concept.\" :\n    \"Level 7 – Every Detail (Importance 1-10): Convert every educational sentence, fact, number, figure reference, and concept into flashcards. Include all mechanisms, symptoms (with timing/sequence), treatments (with doses if present), and complications.\";\n\n  // Build card type descriptions\n  const cardTypeDescriptions: string[] = [];\n  const reverseEnabled = cardTypes.includes(\"reverse\");\n  \n  if (cardTypes.includes(\"qa\")) {\n    cardTypeDescriptions.push(`- Q&A: One clear question + ultra-brief answer (few words or bullets)`);\n  }\n  \n  if (cardTypes.includes(\"cloze\")) {\n    cardTypeDescriptions.push(`- Cloze: Hide key terms, values, or phrases using {{c1::term}} format (no large blanks)`);\n  }\n  \n  if (reverseEnabled) {\n    cardTypeDescriptions.push(`- Reverse: Also generate the inverse card (answer → question) for bidirectional study`);\n  }\n\n  const cardTypeList = cardTypeDescriptions.join('\\n');\n  const customInstructionsText = customInstructions \n    ? `\\n\\n**Custom Instructions:** ${customInstructions}`\n    : '';\n  \n  const subdeckGuidance = createSubdecks \n    ? `\\n\\n**SUBTOPIC ORGANIZATION:**\n- You MUST identify and assign each flashcard to a specific subtopic/section\n- Subtopic names should be clear, concise topic labels (e.g., \"Pathophysiology\", \"Clinical Features\", \"Treatment\")\n- Group related flashcards under the same subtopic\n- Use consistent subtopic names throughout the content`\n    : '';\n\n  const imageGuidance = images && images.length > 0\n    ? `\\n\\n**⚠️ IMAGE SELECTION REQUIRED - ${images.length} IMAGES AVAILABLE:**\n${images.map((img, idx) => `Image ${idx + 1}${img.pageNumber ? ` (Page ${img.pageNumber})` : ''}: ${img.imageUrl}`).join('\\n')}\n\n**REQUIRED: Every flashcard MUST include an imageUrl field.**\n\n**HOW TO SELECT THE BEST IMAGE FOR EACH FLASHCARD:**\n1. **Match by page number**: If flashcard is about content from page 3, use Image 3's URL\n2. **Match by topic**: Choose the image most relevant to the flashcard's concept\n3. **For text-only content**: If no image is directly relevant, use the first available image from that section\n4. **Copy the EXACT full URL** from above into the \"imageUrl\" field - no modifications\n\n**PRIORITY FOR IMAGE SELECTION:**\n- Anatomy/pathology flashcards → Use anatomical diagrams\n- Clinical presentation/signs → Use clinical images or diagnostic images\n- Treatment/procedures → Use flowcharts, algorithms, or procedural diagrams\n- Definitions/mechanisms → Use the most contextually relevant image from that page\n\nRemember: ALL flashcards must have an imageUrl. Choose the most educationally valuable image for each card.`\n    : '';\n\n  const systemPrompt = `You are a medical education AI that generates flashcards using an importance-based filtering system.\n\n**TWO-STAGE PROCESS:**\n\nSTAGE 1 - Analyze & Categorize (Mental Process):\n- Read entire content and identify all facts\n- Assign importance score (1-10) to each fact based on:\n  * 9-10: Core definitions, main classifications (what IS it?)\n  * 8: Primary mechanisms, main causes/pathways  \n  * 7: Major clinical features, key symptoms, main treatments\n  * 6: Supporting details, important numbers/values\n  * 5: Secondary mechanisms, exceptions, clinical variations\n  * 4: Additional details, less common features\n  * 1-3: Rare cases, minor details, examples\n\nSTAGE 2 - Filter & Generate:\n- Current coverage level: ${currentLevel.threshold} importance range\n- Generate flashcards ONLY from facts with importance ≥ ${currentLevel.threshold.split('-')[0]}\n- Lower importance facts must be completely IGNORED at this level\n\n**FLASHCARD FORMAT:**\n- Front: focused, standalone question\n- Back: ULTRA-CONCISE answer:\n  • Single fact: brief \n  • Multiple facts: bullet points (• item)\n  • NO complete paragraphs\n\nKeep cards atomic — one idea per card.\nLower coverage levels = dramatically fewer cards.\n\n---\n**USER SETTINGS:**\nCard Types: ${cardTypes.join(\", \")}\n${reverseEnabled ? 'Reverse Mode: ENABLED — Generate bidirectional cards where appropriate' : ''}\nCoverage Level: ${coverageGuidance}${customInstructionsText}\n---\n\n**CARD STRUCTURE:**\n${cardTypeList}\n\n**IMPORTANCE-BASED FILTERING RULES:**\n\n1. **Analyze ENTIRE Content:** Read all sections but mentally categorize each fact by importance (1-10 scale)\n\n2. **Apply Importance Filter:** ${coverageGuidance}\n   - ONLY create cards from facts meeting the importance threshold\n   - Example for Level 1: A definition (importance 10) → include. A treatment complication (importance 4) → SKIP\n   - Example for Level 3: Main symptoms (importance 7) → include. Rare side effects (importance 3) → SKIP\n\n3. **Topic Priority Examples:**\n   Medical content hierarchy (from highest to lowest importance):\n   * Definitions & classifications (9-10)\n   * Main mechanisms & primary causes (8)\n   * Key clinical features (6 Ps, cardinal symptoms) (7)\n   * Diagnostic criteria & main treatments (6-7)\n   * Secondary mechanisms & exceptions (5)\n   * Complications & treatment details (4-5)\n   * Timing/sequence details & specific doses (3-4)\n   * Rare cases & examples (1-3)\n\n4. **Conciseness:** Answers ULTRA-CONCISE:\n   - Single fact: 2-5 words\n   - Multiple facts: bullet points (•)\n   - NO sentences or paragraphs\n\n5. **Atomic Cards:** One fact per card. Standalone questions.\n\n6. **No Hallucination:** Extract ONLY from provided content.\n\n7. **No Redundancy:** Merge duplicate topics.\n\n**Critical:** At Level 1, if content has 50 facts, maybe only 3-5 have importance ≥9. Create ONLY those 3-5 cards. Do not generate more by lowering standards.${subdeckGuidance}${imageGuidance}`;\n\n  console.log(`Calling Gemini API for chunk: ${chunkContext.substring(0, 50)}...`);\n  \n  // Calculate timeout based on chunk size and tier configuration\n  const chunkTokens = countTokens(content);\n  // For small chunks with thinking mode enabled, use medium timeout to account for overhead\n  const timeout = \n    chunkTokens < 30000 ? (config.thinkingMode ? config.timeouts.medium : config.timeouts.small) :\n    chunkTokens < 70000 ? config.timeouts.medium :\n    config.timeouts.large;\n  \n  // Calculate thinking budget based on granularity (Tier 2+ only)\n  const thinkingBudget = config.thinkingMode ? (granularity >= 5 ? 8192 : 4096) : 0;\n  \n  console.log(`Chunk size: ${chunkTokens} tokens, timeout: ${timeout / 1000}s, thinking budget: ${thinkingBudget} (Tier ${GEMINI_TIER})`);\n  \n  try {\n    const response = await withRetry(\n      () => withTimeout(\n        ai.models.generateContent({\n          model: \"gemini-2.5-flash\",\n          config: {\n            systemInstruction: systemPrompt,\n            responseMimeType: \"application/json\",\n            temperature: 0.25,\n            ...(config.thinkingMode && { \n              thinkingConfig: { \n                thinkingBudget \n              } \n            }),\n            responseSchema: {\n              type: \"object\",\n              properties: {\n                flashcards: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      question: { type: \"string\" },\n                      answer: { type: \"string\" },\n                      cardType: { type: \"string\" },\n                      ...(createSubdecks ? { subtopic: { type: \"string\" } } : {}),\n                      ...(images && images.length > 0 ? { imageUrl: { type: \"string\" } } : {}),\n                    },\n                    required: (() => {\n                      const baseRequired = [\"question\", \"answer\", \"cardType\"];\n                      if (createSubdecks) baseRequired.push(\"subtopic\");\n                      if (images && images.length > 0) baseRequired.push(\"imageUrl\");\n                      return baseRequired;\n                    })(),\n                  },\n                },\n              },\n              required: [\"flashcards\"],\n            },\n          },\n          contents: `IMPORTANCE-BASED FLASHCARD GENERATION\n\nContext: ${chunkContext}\n\nSTEP 1 - ANALYZE (mentally categorize all facts by importance 1-10):\nRead the ENTIRE content section below and identify ALL facts:\n- Core definitions/classifications (importance 9-10)\n- Main mechanisms/causes (importance 8)\n- Key clinical features/symptoms (importance 7)\n- Supporting details/treatments (importance 6)\n- Secondary info/exceptions (importance 5)\n- Additional details (importance 4)\n- Minor details/examples (importance 1-3)\n\n**CRITICAL:** Process the COMPLETE content below. Do NOT skip or miss any sections. Read from start to finish.\n\nSTEP 2 - FILTER by current level (${currentLevel.threshold}):\n- Include ONLY facts with importance ≥ ${currentLevel.threshold.split('-')[0]}\n- Lower importance facts are EXCLUDED entirely\n- This naturally produces fewer cards at lower levels\n\nSTEP 3 - GENERATE flashcards:\n- Create ultra-concise cards (2-5 words or bullets)\n- One atomic fact per card${createSubdecks ? '\\n- Assign each flashcard to a specific subtopic (e.g., \"Pathophysiology\", \"Treatment\", \"Diagnosis\")' : ''}\n- Ensure COMPLETE coverage of all qualifying facts in this section\n- **IMPORTANT:** For medical content at level ${granularity}, expect to generate MANY flashcards (typically 20-50+ cards per topic at level 5-7). Do NOT artificially limit the number of flashcards - create cards for EVERY qualifying fact.\n\nContent to process:\n\n${content}`,\n        }),\n        timeout, // Dynamic timeout based on chunk size\n        \"Gemini API request timed out\"\n      ),\n      config.retryAttempts, // Use tier-based retry count\n      config.retryDelay // Use tier-based retry delay\n    );\n\n    const rawJson = response.text;\n    if (!rawJson) {\n      console.error(\"Gemini returned empty response\");\n      throw new Error(\"Empty response from Gemini\");\n    }\n\n    // Output token cap detection (8,192 token limit)\n    const responseTokens = countTokens(rawJson);\n    const OUTPUT_TOKEN_LIMIT = 8192;\n    const OUTPUT_WARNING_THRESHOLD = 7500; // 92% of limit\n    \n    if (responseTokens >= OUTPUT_WARNING_THRESHOLD) {\n      console.warn(`⚠️  Response near output token limit: ${responseTokens}/${OUTPUT_TOKEN_LIMIT} tokens`);\n      if (responseTokens >= OUTPUT_TOKEN_LIMIT * 0.98) {\n        console.error(`❌ CRITICAL: Response may be truncated! At ${responseTokens} tokens (limit: ${OUTPUT_TOKEN_LIMIT})`);\n      }\n    }\n\n    const data = JSON.parse(rawJson);\n    const flashcards = data.flashcards || [];\n    console.log(`Gemini API returned ${flashcards.length} flashcards (${responseTokens} output tokens) for chunk: ${chunkContext.substring(0, 50)}...`);\n    \n    // Estimate expected cards based on granularity and content size\n    // Granularity 6-7 (comprehensive): ~1 card per 2000 tokens\n    // Granularity 4-5 (balanced): ~1 card per 4000 tokens\n    // Granularity 1-3 (selective): ~1 card per 10000 tokens\n    const expectedMinCards = granularity >= 6 \n      ? Math.floor(chunkTokens / 2000)\n      : granularity >= 4\n      ? Math.floor(chunkTokens / 4000)\n      : Math.floor(chunkTokens / 10000);\n    \n    if (flashcards.length === 0) {\n      console.warn(`Warning: Gemini returned 0 flashcards for chunk. This may indicate the content is too short or lacks extractable information.`);\n    } else if (flashcards.length < expectedMinCards && responseTokens >= OUTPUT_WARNING_THRESHOLD) {\n      console.warn(`⚠️  POSSIBLE TRUNCATION: Expected ~${expectedMinCards}+ cards, got ${flashcards.length}. Response at ${responseTokens} tokens.`);\n      console.warn(`   Consider splitting this ${chunkTokens}-token chunk into smaller pieces.`);\n    }\n    \n    // Validate flashcard fields\n    const validCardTypes = ['qa', 'cloze', 'reverse'];\n    const invalidCards: Array<{ index: number; issues: string[] }> = [];\n    \n    flashcards.forEach((card: GeneratedFlashcard, index: number) => {\n      const issues: string[] = [];\n      \n      // Validate cardType\n      if (!validCardTypes.includes(card.cardType)) {\n        issues.push(`Invalid cardType \"${card.cardType}\" (must be: qa, cloze, or reverse)`);\n        // Auto-fix: default to 'qa'\n        card.cardType = 'qa' as any;\n      }\n      \n      // Validate imageUrl format when present\n      if (card.imageUrl) {\n        try {\n          new URL(card.imageUrl);\n        } catch {\n          issues.push(`Invalid imageUrl format: \"${card.imageUrl}\"`);\n        }\n      }\n      \n      if (issues.length > 0) {\n        invalidCards.push({ index, issues });\n      }\n    });\n    \n    if (invalidCards.length > 0) {\n      console.warn(`⚠️  ${invalidCards.length} flashcard(s) had validation issues (auto-fixed where possible):`);\n      invalidCards.slice(0, 3).forEach(({ index, issues }) => {\n        console.warn(`  Card ${index + 1}: ${issues.join(', ')}`);\n      });\n    }\n    \n    // Validate imageUrl when images were provided\n    if (images && images.length > 0) {\n      const cardsWithoutImages = flashcards.filter((card: GeneratedFlashcard) => !card.imageUrl);\n      if (cardsWithoutImages.length > 0) {\n        console.error(`VALIDATION ERROR: ${cardsWithoutImages.length}/${flashcards.length} flashcards missing imageUrl despite ${images.length} images being available!`);\n        console.error(`Sample cards without images:`, cardsWithoutImages.slice(0, 2));\n      } else {\n        console.log(`✓ All ${flashcards.length} flashcards have imageUrl values`);\n      }\n    }\n    \n    return flashcards;\n  } catch (error) {\n    console.error(\"Error generating flashcards:\", error);\n    console.error(\"Error type:\", error instanceof Error ? error.constructor.name : typeof error);\n    throw new Error(`Failed to generate flashcards: ${error}`);\n  }\n}\n\nexport function groupFlashcardsBySubtopic(flashcards: GeneratedFlashcard[]): SubdeckGroup[] {\n  const groups = new Map<string, { displayName: string; cards: GeneratedFlashcard[] }>();\n  \n  for (const card of flashcards) {\n    const subtopic = card.subtopic || \"General\";\n    // Use lowercase for case-insensitive grouping\n    const key = subtopic.toLowerCase();\n    \n    if (!groups.has(key)) {\n      groups.set(key, { displayName: subtopic, cards: [] });\n    }\n    groups.get(key)!.cards.push(card);\n  }\n  \n  // Sort groups alphabetically by display name\n  return Array.from(groups.entries())\n    .sort(([keyA, groupA], [keyB, groupB]) => groupA.displayName.localeCompare(groupB.displayName))\n    .map(([key, group]) => ({\n      subtopic: group.displayName,\n      flashcards: group.cards\n    }));\n}\n","size_bytes":39175},"server/storage.ts":{"content":"import { type User, type InsertUser, type Deck, type InsertDeck, type Flashcard, type InsertFlashcard, users, decks, flashcards } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and, asc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createDeck(deck: InsertDeck): Promise<Deck>;\n  getDeck(id: string): Promise<Deck | undefined>;\n  getDecksByUserId(userId: string): Promise<Deck[]>;\n  getSubdecks(parentDeckId: string): Promise<Deck[]>;\n  getAllSubdecksRecursive(parentDeckId: string): Promise<Deck[]>;\n  updateDeck(id: string, deck: Partial<InsertDeck>): Promise<Deck | undefined>;\n  deleteDeck(id: string): Promise<void>;\n  \n  createFlashcard(flashcard: InsertFlashcard): Promise<Flashcard>;\n  getFlashcardsByDeckId(deckId: string): Promise<Flashcard[]>;\n  getAllFlashcardsWithSubdecks(deckId: string): Promise<Flashcard[]>;\n  updateFlashcard(id: string, flashcard: Partial<InsertFlashcard>): Promise<Flashcard | undefined>;\n  deleteFlashcard(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private decks: Map<string, Deck>;\n  private flashcards: Map<string, Flashcard>;\n\n  constructor() {\n    this.users = new Map();\n    this.decks = new Map();\n    this.flashcards = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = insertUser.id || randomUUID();\n    const user: User = { \n      ...insertUser,\n      email: insertUser.email ?? null,\n      firstName: insertUser.firstName ?? null,\n      lastName: insertUser.lastName ?? null,\n      profileImageUrl: insertUser.profileImageUrl ?? null,\n      id,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n\n  async createDeck(insertDeck: InsertDeck): Promise<Deck> {\n    const id = randomUUID();\n    const now = new Date();\n    const deck: Deck = { \n      ...insertDeck,\n      parentDeckId: insertDeck.parentDeckId ?? null,\n      customInstructions: insertDeck.customInstructions ?? null,\n      includeSource: insertDeck.includeSource ?? 'false',\n      createSubdecks: insertDeck.createSubdecks ?? 'false',\n      fileUrl: insertDeck.fileUrl ?? null,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.decks.set(id, deck);\n    return deck;\n  }\n\n  async getDeck(id: string): Promise<Deck | undefined> {\n    return this.decks.get(id);\n  }\n\n  async getDecksByUserId(userId: string): Promise<Deck[]> {\n    return Array.from(this.decks.values()).filter(deck => deck.userId === userId);\n  }\n\n  async getSubdecks(parentDeckId: string): Promise<Deck[]> {\n    return Array.from(this.decks.values()).filter(deck => deck.parentDeckId === parentDeckId);\n  }\n\n  async updateDeck(id: string, updateData: Partial<InsertDeck>): Promise<Deck | undefined> {\n    const deck = this.decks.get(id);\n    if (!deck) return undefined;\n    \n    const updatedDeck = { \n      ...deck, \n      ...updateData,\n      updatedAt: new Date()\n    };\n    this.decks.set(id, updatedDeck);\n    return updatedDeck;\n  }\n\n  async deleteDeck(id: string): Promise<void> {\n    // Delete all subdecks first\n    const subdecks = await this.getSubdecks(id);\n    for (const subdeck of subdecks) {\n      await this.deleteDeck(subdeck.id);\n    }\n    \n    // Delete all flashcards associated with this deck\n    Array.from(this.flashcards.values())\n      .filter(card => card.deckId === id)\n      .forEach(card => this.flashcards.delete(card.id));\n    \n    // Delete the deck itself\n    this.decks.delete(id);\n  }\n\n  async createFlashcard(insertFlashcard: InsertFlashcard): Promise<Flashcard> {\n    const id = randomUUID();\n    const flashcard: Flashcard = { \n      ...insertFlashcard,\n      id,\n      imageUrl: insertFlashcard.imageUrl ?? null,\n      isLearned: insertFlashcard.isLearned ?? false,\n      learnedAt: insertFlashcard.learnedAt ?? null,\n      createdAt: new Date()\n    };\n    this.flashcards.set(id, flashcard);\n    return flashcard;\n  }\n\n  async getFlashcardsByDeckId(deckId: string): Promise<Flashcard[]> {\n    return Array.from(this.flashcards.values())\n      .filter(card => card.deckId === deckId)\n      .sort((a, b) => a.position - b.position);\n  }\n\n  async updateFlashcard(id: string, updateData: Partial<InsertFlashcard>): Promise<Flashcard | undefined> {\n    const flashcard = this.flashcards.get(id);\n    if (!flashcard) return undefined;\n    \n    const updatedFlashcard = { ...flashcard, ...updateData };\n    this.flashcards.set(id, updatedFlashcard);\n    return updatedFlashcard;\n  }\n\n  async deleteFlashcard(id: string): Promise<void> {\n    this.flashcards.delete(id);\n  }\n\n  async getAllSubdecksRecursive(parentDeckId: string): Promise<Deck[]> {\n    const directSubdecks = await this.getSubdecks(parentDeckId);\n    const allSubdecks: Deck[] = [...directSubdecks];\n    \n    for (const subdeck of directSubdecks) {\n      const childSubdecks = await this.getAllSubdecksRecursive(subdeck.id);\n      allSubdecks.push(...childSubdecks);\n    }\n    \n    return allSubdecks;\n  }\n\n  async getAllFlashcardsWithSubdecks(deckId: string): Promise<Flashcard[]> {\n    const cards = await this.getFlashcardsByDeckId(deckId);\n    const subdecks = await this.getAllSubdecksRecursive(deckId);\n    \n    for (const subdeck of subdecks) {\n      const subdeckCards = await this.getFlashcardsByDeckId(subdeck.id);\n      cards.push(...subdeckCards);\n    }\n    \n    return cards.sort((a, b) => a.position - b.position);\n  }\n}\n\nexport class DbStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async createDeck(insertDeck: InsertDeck): Promise<Deck> {\n    const result = await db.insert(decks).values(insertDeck).returning();\n    return result[0];\n  }\n\n  async getDeck(id: string): Promise<Deck | undefined> {\n    const result = await db.select().from(decks).where(eq(decks.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getDecksByUserId(userId: string): Promise<Deck[]> {\n    return db.select().from(decks).where(eq(decks.userId, userId)).orderBy(asc(decks.createdAt));\n  }\n\n  async getSubdecks(parentDeckId: string): Promise<Deck[]> {\n    return db.select().from(decks).where(eq(decks.parentDeckId, parentDeckId)).orderBy(asc(decks.createdAt));\n  }\n\n  async updateDeck(id: string, updateData: Partial<InsertDeck>): Promise<Deck | undefined> {\n    const result = await db\n      .update(decks)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(decks.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteDeck(id: string): Promise<void> {\n    // Database cascade delete will handle subdecks and flashcards automatically\n    // due to onDelete: \"cascade\" in schema\n    await db.delete(decks).where(eq(decks.id, id));\n  }\n\n  async createFlashcard(insertFlashcard: InsertFlashcard): Promise<Flashcard> {\n    const result = await db.insert(flashcards).values(insertFlashcard).returning();\n    return result[0];\n  }\n\n  async getFlashcardsByDeckId(deckId: string): Promise<Flashcard[]> {\n    return db\n      .select()\n      .from(flashcards)\n      .where(eq(flashcards.deckId, deckId))\n      .orderBy(asc(flashcards.position));\n  }\n\n  async updateFlashcard(id: string, updateData: Partial<InsertFlashcard>): Promise<Flashcard | undefined> {\n    const result = await db\n      .update(flashcards)\n      .set(updateData)\n      .where(eq(flashcards.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteFlashcard(id: string): Promise<void> {\n    await db.delete(flashcards).where(eq(flashcards.id, id));\n  }\n\n  async getAllSubdecksRecursive(parentDeckId: string): Promise<Deck[]> {\n    const directSubdecks = await this.getSubdecks(parentDeckId);\n    const allSubdecks: Deck[] = [...directSubdecks];\n    \n    for (const subdeck of directSubdecks) {\n      const childSubdecks = await this.getAllSubdecksRecursive(subdeck.id);\n      allSubdecks.push(...childSubdecks);\n    }\n    \n    return allSubdecks;\n  }\n\n  async getAllFlashcardsWithSubdecks(deckId: string): Promise<Flashcard[]> {\n    const cards = await this.getFlashcardsByDeckId(deckId);\n    const subdecks = await this.getAllSubdecksRecursive(deckId);\n    \n    for (const subdeck of subdecks) {\n      const subdeckCards = await this.getFlashcardsByDeckId(subdeck.id);\n      cards.push(...subdeckCards);\n    }\n    \n    return cards.sort((a, b) => a.position - b.position);\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":9247},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/progressManager.ts":{"content":"export interface ProgressUpdate {\n  sessionId: string;\n  stage: \"extracting\" | \"analyzing\" | \"chunking\" | \"generating\" | \"saving\" | \"complete\" | \"error\";\n  message: string;\n  progress: number; // 0-100\n  currentStep?: number;\n  totalSteps?: number;\n  cardsGenerated?: number;\n  error?: string;\n}\n\nexport interface GenerationResult {\n  deckId: string;\n  flashcardCount: number;\n}\n\nclass ProgressManager {\n  private progressStates = new Map<string, ProgressUpdate>();\n  private results = new Map<string, GenerationResult | null>();\n\n  setProgress(update: ProgressUpdate) {\n    this.progressStates.set(update.sessionId, update);\n    \n    // Auto-cleanup after 5 minutes\n    setTimeout(() => {\n      this.progressStates.delete(update.sessionId);\n    }, 5 * 60 * 1000);\n  }\n\n  getProgress(sessionId: string): ProgressUpdate | null {\n    return this.progressStates.get(sessionId) || null;\n  }\n\n  setResult(sessionId: string, result: GenerationResult | null) {\n    this.results.set(sessionId, result);\n    // Auto-cleanup after 5 minutes\n    setTimeout(() => {\n      this.results.delete(sessionId);\n    }, 5 * 60 * 1000);\n  }\n\n  getResult(sessionId: string): GenerationResult | null | undefined {\n    return this.results.get(sessionId);\n  }\n\n  clearSession(sessionId: string) {\n    this.progressStates.delete(sessionId);\n    this.results.delete(sessionId);\n  }\n}\n\nexport const progressManager = new ProgressManager();\n","size_bytes":1411},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/GenerationForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Upload, Youtube, Type, Sparkles, Loader2, Settings2, FileText } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport GenerationProgressDialog from \"./GenerationProgressDialog\";\nimport { motion } from \"framer-motion\";\n\nexport default function GenerationForm() {\n  const [textContent, setTextContent] = useState(\"\");\n  const [youtubeUrl, setYoutubeUrl] = useState(\"\");\n  const [cardTypes, setCardTypes] = useState({\n    qa: true,\n    cloze: false,\n    reverse: false,\n  });\n  const [granularity, setGranularity] = useState([5]);\n  const [customInstructions, setCustomInstructions] = useState(\"\");\n  const [file, setFile] = useState<File | null>(null);\n  const [title, setTitle] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"text\");\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [includeSource, setIncludeSource] = useState(false);\n  const [createSubdecks, setCreateSubdecks] = useState(false);\n  const [includeImages, setIncludeImages] = useState(false);\n  const { user } = useAuth();\n  const userId = user?.id;\n  const { toast } = useToast();\n\n  const textMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/generate/text\", data);\n      return await res.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.sessionId) {\n        setSessionId(data.sessionId);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message || \"Failed to generate flashcards\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const documentMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      // Get the auth token from supabase\n      const { data: { session } } = await import('@/lib/supabase').then(m => m.supabase.auth.getSession());\n      const token = session?.access_token;\n      \n      const res = await fetch(\"/api/generate/document\", {\n        method: \"POST\",\n        headers: {\n          ...(token ? { 'Authorization': `Bearer ${token}` } : {}),\n        },\n        body: formData,\n      });\n      if (!res.ok) {\n        const errorText = await res.text();\n        let errorMessage = \"Failed to generate flashcards\";\n        try {\n          const errorJson = JSON.parse(errorText);\n          errorMessage = errorJson.error || errorMessage;\n        } catch {\n          errorMessage = errorText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      return res.json();\n    },\n    onSuccess: (data) => {\n      if (data.sessionId) {\n        setSessionId(data.sessionId);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message || \"Failed to generate flashcards\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const youtubeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/generate/youtube\", data);\n      return await res.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.sessionId) {\n        setSessionId(data.sessionId);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message || \"Failed to generate flashcards\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!userId) {\n      toast({\n        title: \"Authentication required\",\n        description: \"Please sign in to generate flashcards\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!title.trim()) {\n      toast({\n        title: \"Title required\",\n        description: \"Please enter a title for your deck\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const selectedCardTypes = Object.entries(cardTypes)\n      .filter(([_, enabled]) => enabled)\n      .map(([type, _]) => type);\n\n    if (selectedCardTypes.length === 0) {\n      toast({\n        title: \"Card type required\",\n        description: \"Please select at least one card type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const baseData = {\n      title,\n      cardTypes: selectedCardTypes,\n      granularity: granularity[0],\n      customInstructions: customInstructions.trim(),\n      includeSource: includeSource.toString(),\n      createSubdecks: createSubdecks.toString(),\n      includeImages: includeImages.toString(),\n    };\n\n    if (activeTab === \"text\") {\n      if (!textContent.trim()) {\n        toast({\n          title: \"Content required\",\n          description: \"Please enter some content to generate flashcards from\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      textMutation.mutate({ ...baseData, content: textContent });\n    } else if (activeTab === \"document\") {\n      if (!file) {\n        toast({\n          title: \"File required\",\n          description: \"Please upload a file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"title\", title);\n      formData.append(\"cardTypes\", JSON.stringify(selectedCardTypes));\n      formData.append(\"granularity\", granularity[0].toString());\n      formData.append(\"customInstructions\", customInstructions.trim());\n      formData.append(\"includeSource\", includeSource.toString());\n      formData.append(\"createSubdecks\", createSubdecks.toString());\n      formData.append(\"includeImages\", includeImages.toString());\n      documentMutation.mutate(formData);\n    } else if (activeTab === \"youtube\") {\n      if (!youtubeUrl.trim()) {\n        toast({\n          title: \"URL required\",\n          description: \"Please enter a YouTube URL\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      youtubeMutation.mutate({ ...baseData, url: youtubeUrl });\n    }\n  };\n\n  const isLoading = textMutation.isPending || documentMutation.isPending || youtubeMutation.isPending;\n\n  const granularityLabels = [\n    \"Essential core principles only\",\n    \"Key concepts and main topics\",\n    \"Important concepts with details\",\n    \"Balanced coverage\",\n    \"Comprehensive with details\",\n    \"Thorough with examples\",\n    \"Every detail and nuance\",\n  ];\n\n  return (\n    <>\n      <GenerationProgressDialog\n        sessionId={sessionId}\n        onComplete={() => {\n          setSessionId(null);\n          toast({\n            title: \"Success!\",\n            description: \"Your flashcards are ready\",\n          });\n        }}\n        onError={(error) => {\n          setSessionId(null);\n          toast({\n            title: \"Generation failed\",\n            description: error,\n            variant: \"destructive\",\n          });\n        }}\n        onDismiss={() => setSessionId(null)}\n      />\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Card className=\"max-w-5xl mx-auto bg-gradient-to-br from-card to-card/80 border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl font-display flex items-center gap-2\">\n              <Sparkles className=\"w-6 h-6 text-primary\" />\n              Generate Flashcards\n            </CardTitle>\n            <CardDescription>\n              Choose your content source and customize how AI generates your flashcards\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-8\">\n            {/* Deck Title */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"deck-title\" className=\"text-base font-semibold\">Deck Title</Label>\n              <Input\n                id=\"deck-title\"\n                placeholder=\"e.g., Biology Chapter 5, JavaScript Basics\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                data-testid=\"input-title\"\n                className=\"h-11\"\n              />\n            </div>\n\n            {/* Content Source */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-base font-semibold flex items-center gap-2\">\n                <FileText className=\"w-4 h-4 text-primary\" />\n                Content Source\n              </Label>\n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3 h-11\">\n                  <TabsTrigger value=\"text\" data-testid=\"tab-text\" className=\"gap-2\">\n                    <Type className=\"w-4 h-4\" />\n                    Text\n                  </TabsTrigger>\n                  <TabsTrigger value=\"document\" data-testid=\"tab-document\" className=\"gap-2\">\n                    <Upload className=\"w-4 h-4\" />\n                    Document\n                  </TabsTrigger>\n                  <TabsTrigger value=\"youtube\" data-testid=\"tab-youtube\" className=\"gap-2\">\n                    <Youtube className=\"w-4 h-4\" />\n                    YouTube\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"text\" className=\"space-y-4 mt-6\">\n                  <Textarea\n                    placeholder=\"Paste the text you want to create flashcards from...\"\n                    className=\"min-h-48 resize-y\"\n                    value={textContent}\n                    onChange={(e) => setTextContent(e.target.value)}\n                    data-testid=\"textarea-content\"\n                  />\n                </TabsContent>\n\n                <TabsContent value=\"document\" className=\"mt-6\">\n                  <div className=\"border-2 border-dashed border-border rounded-xl p-10 text-center hover:border-primary/50 transition-colors bg-gradient-to-br from-muted/20 to-transparent\">\n                    <Upload className=\"w-14 h-14 text-primary mx-auto mb-4\" />\n                    <p className=\"text-sm font-medium mb-2\">\n                      Drag and drop or click to upload\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mb-4\">\n                      PDF, DOCX, TXT, PPT, PPTX (max 100MB)\n                    </p>\n                    <Input\n                      type=\"file\"\n                      accept=\".pdf,.docx,.txt,.ppt,.pptx,.doc\"\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                      onChange={(e) => setFile(e.target.files?.[0] || null)}\n                      data-testid=\"input-file\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => document.getElementById('file-upload')?.click()}\n                      data-testid=\"button-browse\"\n                    >\n                      Browse Files\n                    </Button>\n                    {file && (\n                      <p className=\"text-sm mt-4 text-foreground font-medium\">\n                        Selected: {file.name}\n                      </p>\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"youtube\" className=\"space-y-4 mt-6\">\n                  <Input\n                    type=\"url\"\n                    placeholder=\"https://www.youtube.com/watch?v=...\"\n                    value={youtubeUrl}\n                    onChange={(e) => setYoutubeUrl(e.target.value)}\n                    data-testid=\"input-youtube\"\n                    className=\"h-11\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Make sure the video has subtitles/captions enabled\n                  </p>\n                </TabsContent>\n              </Tabs>\n            </div>\n\n            {/* Card Configuration */}\n            <Card className=\"bg-gradient-to-br from-muted/30 to-transparent border-primary/10\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-base font-semibold flex items-center gap-2\">\n                  <Settings2 className=\"w-4 h-4 text-primary\" />\n                  Card Configuration\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Card Types */}\n                <div className=\"space-y-4\">\n                  <Label className=\"text-sm font-medium\">Card Types (select one or more)</Label>\n                  <div className=\"grid gap-4\">\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border border-border/50 hover:border-primary/30 transition-colors\">\n                      <div className=\"space-y-0.5\">\n                        <Label htmlFor=\"card-type-qa\" className=\"font-medium cursor-pointer\">Q&A (Question & Answer)</Label>\n                        <p className=\"text-xs text-muted-foreground\">Traditional question and answer format</p>\n                      </div>\n                      <Switch\n                        id=\"card-type-qa\"\n                        checked={cardTypes.qa}\n                        onCheckedChange={(checked) => setCardTypes({ ...cardTypes, qa: checked })}\n                        data-testid=\"switch-card-type-qa\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border border-border/50 hover:border-primary/30 transition-colors\">\n                      <div className=\"space-y-0.5\">\n                        <Label htmlFor=\"card-type-cloze\" className=\"font-medium cursor-pointer\">Cloze Deletion</Label>\n                        <p className=\"text-xs text-muted-foreground\">Fill-in-the-blank style cards</p>\n                      </div>\n                      <Switch\n                        id=\"card-type-cloze\"\n                        checked={cardTypes.cloze}\n                        onCheckedChange={(checked) => setCardTypes({ ...cardTypes, cloze: checked })}\n                        data-testid=\"switch-card-type-cloze\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border border-border/50 hover:border-primary/30 transition-colors\">\n                      <div className=\"space-y-0.5\">\n                        <Label htmlFor=\"card-type-reverse\" className=\"font-medium cursor-pointer\">Reverse (Bidirectional)</Label>\n                        <p className=\"text-xs text-muted-foreground\">Study term → definition or definition → term</p>\n                      </div>\n                      <Switch\n                        id=\"card-type-reverse\"\n                        checked={cardTypes.reverse}\n                        onCheckedChange={(checked) => setCardTypes({ ...cardTypes, reverse: checked })}\n                        data-testid=\"switch-card-type-reverse\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Granularity */}\n                <div className=\"space-y-4 pt-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-sm font-medium\">Content Coverage</Label>\n                    <span className=\"text-xs text-primary font-medium\">\n                      {granularityLabels[granularity[0] - 1]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={granularity}\n                    onValueChange={setGranularity}\n                    min={1}\n                    max={7}\n                    step={1}\n                    className=\"w-full\"\n                    data-testid=\"slider-granularity\"\n                  />\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\n                    <span>Core principles</span>\n                    <span>Every detail</span>\n                  </div>\n                </div>\n\n                {/* Additional Options */}\n                <div className=\"space-y-4 pt-2 border-t border-border/30\">\n                  <Label className=\"text-sm font-medium\">Additional Options</Label>\n                  <div className=\"grid gap-4\">\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border border-border/50 hover:border-primary/30 transition-colors\">\n                      <div className=\"space-y-0.5\">\n                        <Label htmlFor=\"include-source\" className=\"font-medium cursor-pointer\">Include Source in Answer</Label>\n                        <p className=\"text-xs text-muted-foreground\">Add timestamps for videos or page references for documents</p>\n                      </div>\n                      <Switch\n                        id=\"include-source\"\n                        checked={includeSource}\n                        onCheckedChange={setIncludeSource}\n                        data-testid=\"switch-include-source\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border border-border/50 hover:border-primary/30 transition-colors\">\n                      <div className=\"space-y-0.5\">\n                        <Label htmlFor=\"create-subdecks\" className=\"font-medium cursor-pointer\">Create Subdecks by Subtopics</Label>\n                        <p className=\"text-xs text-muted-foreground\">Organize flashcards into separate decks based on subtopics</p>\n                      </div>\n                      <Switch\n                        id=\"create-subdecks\"\n                        checked={createSubdecks}\n                        onCheckedChange={setCreateSubdecks}\n                        data-testid=\"switch-create-subdecks\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border border-border/50 hover:border-primary/30 transition-colors\">\n                      <div className=\"space-y-0.5\">\n                        <Label htmlFor=\"include-images\" className=\"font-medium cursor-pointer\">Include Images</Label>\n                        <p className=\"text-xs text-muted-foreground\">Extract and include relevant images from documents or videos</p>\n                      </div>\n                      <Switch\n                        id=\"include-images\"\n                        checked={includeImages}\n                        onCheckedChange={setIncludeImages}\n                        data-testid=\"switch-include-images\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Custom Instructions */}\n            <div className=\"space-y-3\">\n              <Label htmlFor=\"custom-instructions\" className=\"text-base font-semibold\">\n                Custom Instructions <span className=\"text-muted-foreground font-normal\">(optional)</span>\n              </Label>\n              <Textarea\n                id=\"custom-instructions\"\n                placeholder=\"Example: Focus on mechanisms; shorten clinical correlations; use abbreviations like Na⁺, K⁺; skip historical context; emphasize numerical values\"\n                className=\"min-h-24 resize-y\"\n                value={customInstructions}\n                onChange={(e) => setCustomInstructions(e.target.value)}\n                data-testid=\"textarea-custom-instructions\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                Provide specific guidance to fine-tune flashcard generation\n              </p>\n            </div>\n\n            {/* Generate Button */}\n            <Button \n              onClick={handleGenerate} \n              className=\"w-full h-14 text-lg font-semibold bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 shadow-lg shadow-primary/30\"\n              data-testid=\"button-generate\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"w-5 h-5 mr-2\" />\n                  Generate Flashcards\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </>\n  );\n}\n","size_bytes":20968},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/contentExtractor.ts":{"content":"import { pdf } from \"pdf-parse\";\nimport mammoth from \"mammoth\";\nimport { Innertube } from \"youtubei.js\";\nimport * as fs from \"fs\";\nimport { transcribeYouTubeVideo } from \"./audioExtractor\";\n\nexport async function extractPDFText(filePath: string): Promise<string> {\n  try {\n    const dataBuffer = fs.readFileSync(filePath);\n    const data = await pdf(dataBuffer);\n    return data.text;\n  } catch (error) {\n    throw new Error(`Failed to extract PDF text: ${error}`);\n  }\n}\n\nexport async function extractDOCXText(filePath: string): Promise<string> {\n  try {\n    const result = await mammoth.extractRawText({ path: filePath });\n    return result.value;\n  } catch (error) {\n    throw new Error(`Failed to extract DOCX text: ${error}`);\n  }\n}\n\nexport async function extractTXTText(filePath: string): Promise<string> {\n  try {\n    return fs.readFileSync(filePath, \"utf-8\");\n  } catch (error) {\n    throw new Error(`Failed to extract TXT text: ${error}`);\n  }\n}\n\nexport async function extractPPTText(filePath: string): Promise<string> {\n  try {\n    const result = await mammoth.extractRawText({ path: filePath });\n    return result.value || \"PPT/PPTX parsing limited - please convert to PDF for better results\";\n  } catch (error) {\n    throw new Error(`Failed to extract PPT text: ${error}`);\n  }\n}\n\nexport async function extractYouTubeTranscript(\n  url: string, \n  includeTimestamps: boolean = false,\n  onWhisperFallback?: () => void\n): Promise<string> {\n  const videoId = extractYouTubeVideoId(url);\n  \n  if (!videoId) {\n    throw new Error(\"Invalid YouTube URL\");\n  }\n\n  try {\n    console.log(`Extracting transcript from YouTube URL: ${url}`);\n    console.log(`Extracted video ID: ${videoId}`);\n\n    console.log(`Initializing YouTube client...`);\n    const youtube = await Innertube.create();\n    \n    console.log(`Fetching video info for video ID: ${videoId}`);\n    const info = await youtube.getInfo(videoId);\n    \n    console.log(`Fetching transcript...`);\n    const transcriptData = await info.getTranscript();\n    \n    // Use optional chaining for safer access\n    const segments = transcriptData?.transcript?.content?.body?.initial_segments;\n    \n    if (!segments || !Array.isArray(segments) || segments.length === 0) {\n      throw new Error(\"NO_CAPTIONS\");\n    }\n    \n    // Extract text from transcript segments (segments is now validated)\n    let content: string;\n    \n    if (includeTimestamps) {\n      // Include timestamps in the content\n      content = segments\n        .map((segment: any) => {\n          const startMs = segment.start_ms || 0;\n          const hours = Math.floor(startMs / 3600000);\n          const minutes = Math.floor((startMs % 3600000) / 60000);\n          const seconds = Math.floor((startMs % 60000) / 1000);\n          \n          // Format as HH:MM:SS or MM:SS depending on video length\n          const timestamp = hours > 0 \n            ? `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\n            : `${minutes}:${seconds.toString().padStart(2, '0')}`;\n          \n          // Clean the text by removing excessive whitespace and normalizing\n          const cleanText = segment.snippet.text.replace(/\\s+/g, ' ').trim();\n          return `[${timestamp}] ${cleanText}`;\n        })\n        .join(\" \");\n    } else {\n      // Plain text without timestamps\n      content = segments\n        .map((segment: any) => segment.snippet.text.replace(/\\s+/g, ' ').trim())\n        .join(\" \");\n    }\n    \n    console.log(`Total transcript length: ${content.length} characters`);\n    console.log(`First 200 chars: ${content.substring(0, 200)}`);\n    \n    if (content.trim().length === 0) {\n      throw new Error(\"The video transcript is empty. Please choose a different video.\");\n    }\n    \n    return content;\n  } catch (error: any) {\n    console.error(`YouTube transcript extraction error:`, error);\n    \n    // Check if captions are unavailable - fallback to Whisper transcription\n    if (error.message?.includes(\"NO_CAPTIONS\") || \n        error.message?.includes(\"Transcript is disabled\") || \n        error.message?.includes(\"Transcript not available\") ||\n        error.message?.includes(\"doesn't have subtitles\")) {\n      \n      console.log(`No captions available, falling back to Whisper transcription for video ${videoId}`);\n      \n      // Notify caller that we're using Whisper (for progress updates)\n      if (onWhisperFallback) {\n        onWhisperFallback();\n      }\n      \n      try {\n        const whisperTranscript = await transcribeYouTubeVideo(videoId);\n        \n        if (!whisperTranscript || whisperTranscript.trim().length === 0) {\n          throw new Error(\"Whisper transcription returned empty text\");\n        }\n        \n        console.log(`Whisper transcription successful: ${whisperTranscript.length} characters`);\n        return whisperTranscript;\n      } catch (whisperError: any) {\n        console.error(`Whisper transcription failed:`, whisperError);\n        throw new Error(`This video has no captions and AI transcription failed: ${whisperError.message}`);\n      }\n    }\n    \n    throw new Error(`Failed to extract YouTube transcript: ${error.message || error}`);\n  }\n}\n\nfunction extractYouTubeVideoId(url: string): string | null {\n  const patterns = [\n    /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/,\n    /youtube\\.com\\/embed\\/([^&\\n?#]+)/,\n  ];\n\n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match && match[1]) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\n\nexport async function extractContentFromFile(\n  filePath: string,\n  mimeType: string\n): Promise<string> {\n  const extension = filePath.split(\".\").pop()?.toLowerCase();\n\n  switch (extension) {\n    case \"pdf\":\n      return extractPDFText(filePath);\n    case \"docx\":\n    case \"doc\":\n      return extractDOCXText(filePath);\n    case \"txt\":\n      return extractTXTText(filePath);\n    case \"ppt\":\n    case \"pptx\":\n      return extractPPTText(filePath);\n    default:\n      throw new Error(`Unsupported file type. Please upload PDF, DOCX, DOC, TXT, PPT, or PPTX files only.`);\n  }\n}\n","size_bytes":6075},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/app-sidebar.tsx":{"content":"import { Home, Plus, FolderOpen, Settings, Sparkles, LogOut } from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Link, useLocation } from \"wouter\";\nimport { supabase } from \"@/lib/supabase\";\n\nconst menuItems = [\n  { title: \"Dashboard\", url: \"/dashboard\", icon: Home },\n  { title: \"Generate\", url: \"/generate\", icon: Plus },\n  { title: \"My Decks\", url: \"/decks\", icon: FolderOpen },\n  { title: \"Settings\", url: \"/settings\", icon: Settings },\n];\n\nexport function AppSidebar() {\n  const [location, setLocation] = useLocation();\n\n  const handleLogout = async () => {\n    await supabase.auth.signOut();\n    setLocation(\"/\");\n  };\n\n  return (\n    <Sidebar>\n      <SidebarContent className=\"p-4\">\n        <SidebarGroup>\n          <div className=\"px-2 py-6 mb-4\">\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-6 h-6 text-primary\" />\n              <span className=\"font-display text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                FlashGenius\n              </span>\n            </div>\n          </div>\n          <SidebarGroupLabel className=\"mb-2 px-2\">Menu</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu className=\"space-y-2\">\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url} className=\"py-3 px-3\">\n                    <Link href={item.url}>\n                      <span data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`} className=\"flex items-center gap-3 w-full\">\n                        <item.icon className=\"w-5 h-5\" />\n                        <span className=\"text-sm font-medium\">{item.title}</span>\n                      </span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"p-4\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton onClick={handleLogout} data-testid=\"button-logout\" className=\"py-3 px-3\">\n              <LogOut className=\"w-5 h-5\" />\n              <span className=\"text-sm font-medium\">Logout</span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":2636},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/CardEditor.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Edit, Trash2, Plus, Save, Download } from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface FlashCard {\n  id: string;\n  question: string;\n  answer: string;\n  type: \"qa\" | \"cloze\" | \"reverse\";\n}\n\nconst initialCards: FlashCard[] = [\n  { id: \"1\", question: \"What is photosynthesis?\", answer: \"The process by which plants convert light energy into chemical energy\", type: \"qa\" },\n  { id: \"2\", question: \"The capital of France is {{c1::Paris}}\", answer: \"Paris\", type: \"cloze\" },\n  { id: \"3\", question: \"Mitochondria\", answer: \"Powerhouse of the cell\", type: \"reverse\" },\n];\n\nexport default function CardEditor() {\n  const [cards, setCards] = useState<FlashCard[]>(initialCards);\n  const [selectedCard, setSelectedCard] = useState<FlashCard | null>(cards[0]);\n  const [editedQuestion, setEditedQuestion] = useState(cards[0].question);\n  const [editedAnswer, setEditedAnswer] = useState(cards[0].answer);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [cardToDelete, setCardToDelete] = useState<string | null>(null);\n\n  const handleSelectCard = (card: FlashCard) => {\n    setSelectedCard(card);\n    setEditedQuestion(card.question);\n    setEditedAnswer(card.answer);\n  };\n\n  const handleSave = () => {\n    if (selectedCard) {\n      setCards(cards.map(c => \n        c.id === selectedCard.id \n          ? { ...c, question: editedQuestion, answer: editedAnswer }\n          : c\n      ));\n      console.log(\"Card saved:\", { question: editedQuestion, answer: editedAnswer });\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    setCardToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (cardToDelete) {\n      const newCards = cards.filter(c => c.id !== cardToDelete);\n      setCards(newCards);\n      if (selectedCard?.id === cardToDelete && newCards.length > 0) {\n        handleSelectCard(newCards[0]);\n      }\n      console.log(\"Card deleted:\", cardToDelete);\n    }\n    setDeleteDialogOpen(false);\n    setCardToDelete(null);\n  };\n\n  const handleExport = () => {\n    console.log(\"Export flashcards\");\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"qa\": return \"bg-primary/10 text-primary border-primary/20\";\n      case \"cloze\": return \"bg-[hsl(258,90%,66%)]/10 text-[hsl(258,90%,66%)] border-[hsl(258,90%,66%)]/20\";\n      case \"reverse\": return \"bg-[hsl(158,64%,52%)]/10 text-[hsl(158,64%,52%)] border-[hsl(158,64%,52%)]/20\";\n      default: return \"\";\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"qa\": return \"Q&A\";\n      case \"cloze\": return \"Cloze\";\n      case \"reverse\": return \"Reverse\";\n      default: return type;\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-12rem)]\">\n      <Card className=\"lg:col-span-1\">\n        <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-4\">\n          <CardTitle className=\"text-lg font-display\">Cards ({cards.length})</CardTitle>\n          <Button size=\"sm\" variant=\"outline\" data-testid=\"button-add-card\">\n            <Plus className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-[calc(100vh-18rem)]\">\n            <div className=\"space-y-2 px-6 pb-6\">\n              {cards.map((card) => (\n                <div\n                  key={card.id}\n                  className={`p-4 border-l-4 rounded-md cursor-pointer hover-elevate transition-all ${\n                    selectedCard?.id === card.id\n                      ? \"bg-accent border-l-primary\"\n                      : \"border-l-transparent hover:bg-muted\"\n                  }`}\n                  onClick={() => handleSelectCard(card)}\n                  data-testid={`card-item-${card.id}`}\n                >\n                  <div className=\"flex items-start justify-between gap-2 mb-2\">\n                    <p className=\"text-sm font-medium line-clamp-2 flex-1\">{card.question}</p>\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      className=\"h-6 w-6 flex-shrink-0\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete(card.id);\n                      }}\n                      data-testid={`button-delete-${card.id}`}\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                  <Badge variant=\"outline\" className={`text-xs ${getTypeColor(card.type)}`}>\n                    {getTypeLabel(card.type)}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n\n      <Card className=\"lg:col-span-2\">\n        <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0\">\n          <CardTitle className=\"text-lg font-display flex items-center gap-2\">\n            <Edit className=\"w-5 h-5\" />\n            Edit Card\n          </CardTitle>\n          <Button onClick={handleExport} variant=\"outline\" size=\"sm\" data-testid=\"button-export\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {selectedCard ? (\n            <>\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Question / Front</label>\n                <Textarea\n                  value={editedQuestion}\n                  onChange={(e) => setEditedQuestion(e.target.value)}\n                  className=\"min-h-32 resize-y\"\n                  placeholder=\"Enter question...\"\n                  data-testid=\"textarea-question\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Answer / Back</label>\n                <Textarea\n                  value={editedAnswer}\n                  onChange={(e) => setEditedAnswer(e.target.value)}\n                  className=\"min-h-32 resize-y\"\n                  placeholder=\"Enter answer...\"\n                  data-testid=\"textarea-answer\"\n                />\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"outline\" className={getTypeColor(selectedCard.type)}>\n                  {getTypeLabel(selectedCard.type)}\n                </Badge>\n              </div>\n\n              <Button onClick={handleSave} className=\"w-full\" data-testid=\"button-save\">\n                <Save className=\"w-4 h-4 mr-2\" />\n                Save Changes\n              </Button>\n            </>\n          ) : (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              Select a card to edit\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Card?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the flashcard.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmDelete} data-testid=\"button-confirm-delete\">\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":8173},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Validate Supabase Storage configuration on startup\n  try {\n    const { SupabaseStorageService } = await import('./supabaseStorage');\n    const storageService = new SupabaseStorageService();\n    await storageService.validateBucket();\n    log('Supabase Storage bucket validated successfully');\n  } catch (error) {\n    console.error('Supabase Storage validation failed:', error);\n    console.error('File uploads and image extraction will not work until the bucket is properly configured');\n  }\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2563},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { supabase } from \"./supabase\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nasync function getAuthHeaders(): Promise<HeadersInit> {\n  const { data: { session } } = await supabase.auth.getSession();\n  const headers: HeadersInit = {};\n  \n  if (session?.access_token) {\n    headers['Authorization'] = `Bearer ${session.access_token}`;\n  }\n  \n  return headers;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authHeaders = await getAuthHeaders();\n  const headers: HeadersInit = {\n    ...authHeaders,\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const authHeaders = await getAuthHeaders();\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: authHeaders,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1843},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"replit.md":{"content":"# FlashGenius - AI-Powered Flashcard Generator\n\n## Overview\n\nFlashGenius is an educational productivity application designed to convert various content formats (text, documents, YouTube videos) into AI-generated flashcards for studying. It aims to provide trusted, hallucination-free flashcards with support for multiple card types (Q&A, cloze deletion, reverse cards) and adjustable content coverage, offering precise control over flashcard generation. The project's ambition is to address medical student pain points like forgetting and exam stress by promoting active recall and spaced repetition, making studying more efficient and effective.\n\n## Recent Changes\n\n**October 11, 2025 - Gemini API Bug Fixes & Optimizations:**\n\n*Bug Fixes:*\n1. Fixed hardcoded retry values that ignored tier configuration (lines 854-855)\n   - Now correctly uses `config.retryAttempts` (Tier 1: 2, Tier 2+: 3)\n   - Now correctly uses `config.retryDelay` (Tier 1: 2000ms, Tier 2+: 1000ms)\n2. Improved expected card count estimation for better truncation detection (lines 884-888)\n   - Granularity 6-7: ~1 card per 2000 tokens (was 4000)\n   - Granularity 4-5: ~1 card per 4000 tokens (unchanged)\n   - Granularity 1-3: ~1 card per 10000 tokens (unchanged)\n3. Fixed overlap text boundary issue in chunking (line 150)\n   - Now ensures minimum 3 lines for context continuity even if exceeding 200-token target\n   - Prevents inadequate overlap when encountering very long lines (tables, code blocks)\n\n*Performance Optimizations:*\n4. Enhanced subdeck deduplication with section index tracking (lines 207-230)\n   - Topics now tagged with sectionIndex to prevent merging distinct sections with identical names\n   - Preserves separate \"Introduction\" sections while still deduplicating within sections\n5. Optimized Tier 2+ timeout for thinking mode (lines 777-780)\n   - Small chunks (<30k tokens) now use medium timeout (120s) when thinking mode is enabled\n   - Accounts for thinking mode processing overhead on Tier 2+\n6. Implemented exponential backoff for chunk retries (lines 553-556)\n   - Changed from fixed to exponential delay: `config.retryDelay * Math.pow(2, attempt)`\n   - Tier 1: 2s, 4s, 8s retries | Tier 2+: 1s, 2s, 4s retries\n   - Better rate limit handling and API-friendly retry behavior\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\nFlashcard answer format: Ultra-concise (bullet points or few words, NOT complete sentences or paragraphs)\n\n## System Architecture\n\n### Frontend\n\nThe frontend uses React 18 with TypeScript, Vite, Wouter for routing, TanStack Query for server state management, and Shadcn UI with Tailwind CSS for styling. The design system is medical student-focused, featuring a calming color palette (Medical blue, Soft teal, warm neutrals), Inter and Poppins typography, and smooth Framer Motion animations. Authentication is handled via Supabase Auth with email/password login, using a custom `useAuth` hook for session management. The Supabase client is configured in `client/src/lib/supabase.ts` and automatically includes Bearer tokens in API requests via the queryClient. Routing includes public and protected routes, with a `ProtectedRoute` component for authentication enforcement. The landing page emphasizes active recall and spaced repetition, targeting medical students with a friendly, professional tone and responsive design.\n\n### Backend\n\nThe backend is built with Express.js and Node.js (ESM modules) in TypeScript. It provides RESTful APIs for operations like file uploads (up to 100MB), flashcard generation, and progress tracking. **All flashcard generation endpoints are protected by Supabase Auth middleware (`isAuthenticated`), ensuring only authenticated users can generate flashcards and user IDs are securely extracted from the session.** File uploads are handled with Multer and validated for various document types. Content processing involves text extraction from PDFs, DOCX, TXT, and PPT using `pdf-parse` and `mammoth`, and YouTube transcript extraction via `youtubei.js` with intelligent Whisper AI fallback for videos without captions. Token counting for AI is precisely managed using Tiktoken. A key feature is intelligent, topic-aware chunking for large documents, ensuring semantic continuity and context for AI generation, including 200-token overlaps between chunks. Generated flashcards and associated metadata are stored in a PostgreSQL database.\n\n### Database Schema\n\nThe system uses a PostgreSQL database (Neon serverless with Drizzle ORM) with tables for `users`, `decks`, and `flashcards`.\n- `users`: Stores user account information synced from Supabase Auth (id, email, firstName, lastName, profileImageUrl). User IDs match Supabase auth.users UUIDs for seamless integration. Records are automatically created during signup and login.\n- `decks`: Stores flashcard deck containers, supporting hierarchical structures via `parentDeckId`. It also includes `fileUrl` for cloud storage paths of uploaded documents.\n- `flashcards`: Stores individual flashcards, linked to decks, including question, answer, card type, and `imageUrl` for associated images.\n\nRelationships include one user to many decks, and one deck to many flashcards, with cascade delete configured for data integrity.\n\n### System Design Choices\n\n- **UI/UX:** Medical student-focused aesthetic with a calming color palette and professional typography. Smooth animations for enhanced user experience.\n- **Content Processing:** Robust pipeline for text and multimedia extraction. Intelligent topic-aware chunking for large documents ensures contextual integrity for AI. Accurate token counting is critical for AI context management.\n- **Flashcard Generation:** AI-powered generation with customizable parameters including multiple card types, granularity levels (1-7 scale based on importance-based filtering), and custom instructions. Includes an option for automatically associating relevant images from PDFs or YouTube videos and an \"Include Source\" option for YouTube timestamps.\n- **Subdeck Organization:** AI can automatically detect subtopics and create hierarchical subdecks for better organization, displayed in a file-tree style within the UI.\n- **Data Storage:** Uses a production-ready PostgreSQL database with Drizzle ORM for persistent storage of user data, decks, and flashcards. Uploaded documents and extracted images are stored in **Supabase Storage** with public bucket access for images and user-organized folder structure (userId/uploads/*, userId/images/*). The system validates bucket configuration on startup and provides clear error messages if misconfigured.\n- **API Design:** RESTful endpoints with HTTP polling for asynchronous generation progress tracking.\n\n## Gemini API Tier Configuration\n\nThe system supports tiered performance optimization via the `GEMINI_TIER` environment variable:\n\n**Tier 1 (Default - Conservative for Rate Limits):**\n- Max Concurrency: 5 parallel chunks\n- Retry Attempts: 2 with 2-second delays\n- Timeouts: 2min (small), 3.5min (medium), 5min (large chunks)\n- Thinking Mode: Disabled (no additional reasoning tokens)\n- Best for: Free tier or low rate limit accounts (250 RPD)\n\n**Tier 2+ (Optimized for Higher Rate Limits):**\n- Max Concurrency: 20 parallel chunks (adaptive: 20/12/8 based on doc size)\n- Retry Attempts: 3 with 1-second delays\n- Timeouts: 1min (small), 2min (medium), 3min (large chunks)\n- Thinking Mode: Enabled with dynamic budget (8192 tokens for granularity 5-7, 4096 for 1-4)\n- Output Cap Protection: Detects truncation at 8k token output limit with auto-warnings\n- Best for: Paid tier with higher rate limits (360+ RPM)\n\n**Key Features:**\n- **Thinking Mode**: Improves accuracy by 15-25% for medical content through deeper reasoning (Tier 2+ only)\n- **Dynamic Concurrency**: Automatically adjusts based on document size to maximize speed while respecting API limits\n- **Output Protection**: Monitors response token count and warns if approaching 8,192 token output limit to prevent truncation\n- **Token Estimation**: Uses 3.5 chars/token fallback for technical content when Tiktoken unavailable\n\n**Performance Impact (Tier 2+ vs Tier 1):**\n- Large documents (40+ chunks): 3-5x faster generation\n- Better accuracy on complex medical content (thinking mode)\n- Faster failure recovery (reduced retry delays)\n\n## External Dependencies\n\n- **Authentication:** Supabase Auth (`@supabase/supabase-js`) for email/password authentication. Requires `VITE_SUPABASE_URL` and `VITE_SUPABASE_ANON_KEY` environment variables for frontend, and `SUPABASE_URL` and `SUPABASE_ANON_KEY` for backend. User sessions use Bearer token authentication.\n- **AI Service:** `@google/genai` SDK (Gemini 2.5 Flash) for advanced AI capabilities, requiring a `GEMINI_API_KEY`. Supports customized generation parameters like card types, granularity, custom instructions, image inclusion (using `pdf-to-img`, `youtubei.js`, `ffmpeg`), source inclusion for YouTube videos, and thinking mode for enhanced reasoning. Set `GEMINI_TIER=2` environment variable to enable optimized settings for higher rate limit tiers.\n- **Database:** Neon PostgreSQL serverless database via `@neondatabase/serverless` and Drizzle ORM.\n- **File Processing Libraries:**\n    - `pdf-parse`: For PDF text extraction.\n    - `mammoth`: For DOCX/DOC text extraction.\n    - `youtubei.js`: For YouTube video transcript extraction.\n    - OpenAI Whisper API: As a fallback for AI transcription of videos without captions.\n    - `yt-dlp`: For audio extraction for Whisper transcription.\n    - `multer`: For multipart file upload handling.\n- **Cloud Storage:** Supabase Storage for uploaded documents and extracted images. Files are organized by user ID in a hierarchical structure. Requires a public bucket named `flashgenius-uploads` to be created in the Supabase dashboard with appropriate RLS policies for authenticated upload and public read access.\n- **Export Functionality:** Supports JSON, CSV, and Anki (.apkg) formats. CSV and Anki exports handle subdeck hierarchy information.","size_bytes":10033},"client/src/pages/settings.tsx":{"content":"import SettingsPanel from \"@/components/SettingsPanel\";\n\nexport default function Settings() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-display font-bold\">Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage your account and preferences</p>\n      </div>\n      <SettingsPanel />\n    </div>\n  );\n}\n","size_bytes":364},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/Hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { GraduationCap, Brain, Clock, ArrowRight, Stethoscope } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\n\nexport default function Hero() {\n  return (\n    <div className=\"relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-to-br from-background via-card to-background pt-16\">\n      {/* Optimized animated gradient orbs - fewer, simpler animations */}\n      <motion.div \n        className=\"absolute top-0 right-0 w-[500px] h-[500px] bg-gradient-to-br from-primary/20 to-accent/20 rounded-full blur-3xl\"\n        animate={{\n          scale: [1, 1.1, 1],\n          opacity: [0.3, 0.4, 0.3],\n        }}\n        transition={{\n          duration: 10,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }}\n      />\n      <motion.div \n        className=\"absolute bottom-0 left-0 w-[500px] h-[500px] bg-gradient-to-tr from-accent/20 to-primary/15 rounded-full blur-3xl\"\n        animate={{\n          scale: [1, 1.15, 1],\n          opacity: [0.3, 0.4, 0.3],\n        }}\n        transition={{\n          duration: 12,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n          delay: 1\n        }}\n      />\n\n      <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-20\">\n        <motion.div \n          className=\"text-center\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          <motion.div \n            className=\"inline-flex items-center gap-2 bg-gradient-to-r from-primary/15 via-accent/15 to-primary/15 backdrop-blur-xl border border-primary/20 text-foreground px-5 py-2 rounded-full mb-8 shadow-lg shadow-primary/10\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            whileHover={{ scale: 1.05 }}\n          >\n            <Stethoscope className=\"w-4 h-4 text-primary\" />\n            <span className=\"text-sm font-semibold\">\n              Built for Medical Students\n            </span>\n          </motion.div>\n\n          <motion.h1 \n            className=\"font-display text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold mb-6 leading-[1.15] pb-2\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.3 }}\n          >\n            <span className=\"block bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent pb-1\">\n              Stop Drowning in\n            </span>\n            <motion.span \n              className=\"block bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent pb-1\"\n              style={{ backgroundSize: \"200% 200%\" }}\n              animate={{ \n                backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"],\n              }}\n              transition={{\n                backgroundPosition: {\n                  duration: 5,\n                  repeat: Infinity,\n                  ease: \"linear\"\n                }\n              }}\n            >\n              Medical Notes\n            </motion.span>\n          </motion.h1>\n\n          <motion.p \n            className=\"text-lg sm:text-xl md:text-2xl text-muted-foreground mb-12 max-w-4xl mx-auto leading-relaxed\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.5 }}\n          >\n            You're studying every day, yet facts still slip away. You spend more time{\" \"}\n            <span className=\"text-muted-foreground/80 italic\">making</span> flashcards than{\" \"}\n            <span className=\"text-primary font-semibold\">mastering</span> them.{\" \"}\n            <span className=\"block mt-4\">Let AI turn your lectures, notes, and videos into Anki-ready decks—instantly.</span>\n          </motion.p>\n\n          <motion.div \n            className=\"flex flex-col sm:flex-row items-center justify-center gap-4 mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.6 }}\n          >\n            <Link href=\"/signup\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <Button \n                  size=\"lg\" \n                  className=\"w-full sm:w-auto h-14 px-10 text-lg font-semibold bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 shadow-xl shadow-primary/30\"\n                  data-testid=\"button-get-started\"\n                >\n                  <GraduationCap className=\"mr-2 w-6 h-6\" />\n                  Turn Notes Into Flashcards Now\n                  <ArrowRight className=\"ml-2 w-5 h-5\" />\n                </Button>\n              </motion.div>\n            </Link>\n            <Link href=\"/login\">\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\" \n                  className=\"w-full sm:w-auto h-14 px-10 text-lg font-semibold border-2 border-primary/30 bg-card/50 backdrop-blur-xl hover:bg-card/80\"\n                  data-testid=\"button-sign-in\"\n                >\n                  Sign In\n                </Button>\n              </motion.div>\n            </Link>\n          </motion.div>\n\n          <motion.div \n            className=\"grid grid-cols-1 sm:grid-cols-3 gap-6 max-w-5xl mx-auto\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.7 }}\n          >\n            {[\n              { \n                icon: Clock, \n                label: \"Get Your Time Back\", \n                description: \"Every hour you spend making flashcards is an hour you could've spent mastering them\",\n                gradient: \"from-primary/20 to-accent/20\"\n              },\n              { \n                icon: Brain, \n                label: \"Study Smarter, Not Harder\", \n                description: \"From First Aid to lecture slides—instantly organized, perfectly formatted, Anki-ready\",\n                gradient: \"from-accent/20 to-primary/20\"\n              },\n              { \n                icon: Stethoscope, \n                label: \"Built by Med Students\", \n                description: \"We know the struggle. We built the solution. Now we're helping thousands reclaim their focus\",\n                gradient: \"from-primary/20 via-accent/20 to-primary/20\"\n              }\n            ].map((feature, i) => (\n              <motion.div \n                key={i} \n                className={`relative group bg-gradient-to-br ${feature.gradient} backdrop-blur-xl border border-primary/20 rounded-2xl p-6 hover-elevate overflow-visible`}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: 0.8 + i * 0.1 }}\n                whileHover={{ y: -5 }}\n              >\n                <feature.icon className=\"w-10 h-10 text-primary mx-auto mb-4\" />\n                <p className=\"font-semibold text-base text-foreground mb-2\">{feature.label}</p>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">{feature.description}</p>\n              </motion.div>\n            ))}\n          </motion.div>\n\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7595},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/examples/GenerationForm.tsx":{"content":"import GenerationForm from '../GenerationForm';\n\nexport default function GenerationFormExample() {\n  return (\n    <div className=\"p-8\">\n      <GenerationForm />\n    </div>\n  );\n}\n","size_bytes":179},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ProtectedRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport function ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation(\"/\");\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-muted-foreground\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":712},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/SettingsPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, Bell, Palette, Globe } from \"lucide-react\";\n\nexport default function SettingsPanel() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [notifications, setNotifications] = useState(true);\n  const [language, setLanguage] = useState(\"en\");\n\n  return (\n    <div className=\"space-y-6 max-w-4xl\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"w-5 h-5\" />\n            Profile Settings\n          </CardTitle>\n          <CardDescription>Manage your account information</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Full Name</Label>\n              <Input id=\"name\" defaultValue=\"John Doe\" data-testid=\"input-name\" />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" type=\"email\" defaultValue=\"john@example.com\" data-testid=\"input-email\" />\n            </div>\n          </div>\n          <Button data-testid=\"button-save-profile\">Save Changes</Button>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Palette className=\"w-5 h-5\" />\n            Appearance\n          </CardTitle>\n          <CardDescription>Customize how FlashGenius looks</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label htmlFor=\"dark-mode\">Dark Mode</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Switch to dark theme for comfortable studying\n              </p>\n            </div>\n            <Switch\n              id=\"dark-mode\"\n              checked={darkMode}\n              onCheckedChange={setDarkMode}\n              data-testid=\"switch-dark-mode\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"w-5 h-5\" />\n            Notifications\n          </CardTitle>\n          <CardDescription>Control how you receive updates</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label htmlFor=\"notifications\">Email Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Receive study reminders and updates\n              </p>\n            </div>\n            <Switch\n              id=\"notifications\"\n              checked={notifications}\n              onCheckedChange={setNotifications}\n              data-testid=\"switch-notifications\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Globe className=\"w-5 h-5\" />\n            Language & Region\n          </CardTitle>\n          <CardDescription>Set your preferred language</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"language\">Language</Label>\n            <Select value={language} onValueChange={setLanguage}>\n              <SelectTrigger id=\"language\" data-testid=\"select-language\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"en\">English</SelectItem>\n                <SelectItem value=\"es\">Spanish</SelectItem>\n                <SelectItem value=\"fr\">French</SelectItem>\n                <SelectItem value=\"de\">German</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border-destructive/50\">\n        <CardHeader>\n          <CardTitle className=\"text-destructive\">Danger Zone</CardTitle>\n          <CardDescription>Irreversible account actions</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button variant=\"destructive\" data-testid=\"button-delete-account\">\n            Delete Account\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4972},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Brain } from \"lucide-react\";\n\nexport default function Signup() {\n  const [_, setLocation] = useLocation();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password, firstName, lastName }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        toast({\n          title: \"Error\",\n          description: data.error || \"Failed to create account\",\n          variant: \"destructive\",\n        });\n      } else {\n        // Set the session in Supabase client\n        if (data.session) {\n          await supabase.auth.setSession(data.session);\n          toast({\n            title: \"Success\",\n            description: \"Account created successfully!\",\n          });\n          setLocation(\"/dashboard\");\n        } else {\n          // Email confirmation is required\n          toast({\n            title: \"Check your email\",\n            description: \"Please check your email and click the confirmation link to complete your registration.\",\n          });\n          setLocation(\"/login\");\n        }\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-teal-50 to-orange-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-primary/10 p-3 rounded-full\">\n              <Brain className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">Create an account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your information to get started with FlashGenius\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSignup}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First name</Label>\n                <Input\n                  id=\"firstName\"\n                  data-testid=\"input-firstname\"\n                  type=\"text\"\n                  placeholder=\"John\"\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last name</Label>\n                <Input\n                  id=\"lastName\"\n                  data-testid=\"input-lastname\"\n                  type=\"text\"\n                  placeholder=\"Doe\"\n                  value={lastName}\n                  onChange={(e) => setLastName(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                data-testid=\"input-email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                data-testid=\"input-password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button \n              data-testid=\"button-signup\" \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? \"Creating account...\" : \"Create account\"}\n            </Button>\n            <div className=\"text-sm text-center text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" data-testid=\"link-login\">\n                <span className=\"text-primary hover:underline cursor-pointer\">Sign in</span>\n              </Link>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5441},"client/src/components/FlashcardPreview.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { RotateCcw } from \"lucide-react\";\n\ninterface FlashcardPreviewProps {\n  question: string;\n  answer: string;\n  cardType?: \"qa\" | \"cloze\" | \"reverse\";\n  imageUrl?: string | null;\n}\n\nexport default function FlashcardPreview({ \n  question, \n  answer, \n  cardType = \"qa\",\n  imageUrl = null\n}: FlashcardPreviewProps) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <div className=\"perspective-1000 h-80\">\n        <div\n          className={`relative w-full h-full transition-all duration-500 transform-style-3d ${\n            isFlipped ? \"rotate-y-180\" : \"\"\n          }`}\n          style={{\n            transformStyle: \"preserve-3d\",\n            transform: isFlipped ? \"rotateY(180deg)\" : \"rotateY(0deg)\"\n          }}\n        >\n          <Card\n            className=\"absolute inset-0 backface-hidden flex flex-col items-center justify-center p-8 cursor-pointer hover-elevate active-elevate-2 overflow-auto\"\n            onClick={() => setIsFlipped(!isFlipped)}\n            data-testid=\"card-front\"\n            style={{ backfaceVisibility: \"hidden\" }}\n          >\n            <div className=\"text-center space-y-4 w-full\">\n              <div className=\"inline-block px-3 py-1 bg-primary/10 text-primary text-xs font-semibold rounded-full mb-4\">\n                {cardType === \"qa\" ? \"Question\" : cardType === \"cloze\" ? \"Cloze\" : \"Term\"}\n              </div>\n              {imageUrl && (\n                <div className=\"mb-4\">\n                  <img \n                    src={imageUrl} \n                    alt=\"Flashcard visual\" \n                    className=\"max-w-full max-h-48 mx-auto rounded-md object-contain\"\n                    data-testid=\"image-flashcard\"\n                  />\n                </div>\n              )}\n              <p className=\"text-2xl font-display font-semibold leading-relaxed\">\n                {question}\n              </p>\n              <p className=\"text-sm text-muted-foreground mt-8\">\n                Click to reveal answer\n              </p>\n            </div>\n          </Card>\n\n          <Card\n            className=\"absolute inset-0 backface-hidden flex flex-col items-center justify-center p-8 cursor-pointer hover-elevate active-elevate-2\"\n            onClick={() => setIsFlipped(!isFlipped)}\n            data-testid=\"card-back\"\n            style={{\n              backfaceVisibility: \"hidden\",\n              transform: \"rotateY(180deg)\"\n            }}\n          >\n            <div className=\"text-center space-y-4 w-full\">\n              <div className=\"inline-block px-3 py-1 bg-[hsl(158,64%,52%)]/10 text-[hsl(158,64%,52%)] text-xs font-semibold rounded-full mb-4\">\n                {cardType === \"qa\" ? \"Answer\" : cardType === \"cloze\" ? \"Answer\" : \"Definition\"}\n              </div>\n              <p className=\"text-2xl font-display font-semibold leading-relaxed\">\n                {answer}\n              </p>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center mt-6\">\n        <Button\n          onClick={() => setIsFlipped(!isFlipped)}\n          variant=\"outline\"\n          className=\"gap-2\"\n          data-testid=\"button-flip\"\n        >\n          <RotateCcw className=\"w-4 h-4\" />\n          Flip Card\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3438},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { randomUUID } from \"crypto\";\nimport { storage } from \"./storage\";\nimport { generateFlashcards, groupFlashcardsBySubtopic } from \"./gemini\";\nimport { extractContentFromFile, extractYouTubeTranscript } from \"./contentExtractor\";\nimport { extractImagesFromPDF, extractYouTubeThumbnail, extractYouTubeFrames } from \"./imageExtractor\";\nimport { insertDeckSchema, insertFlashcardSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { progressManager } from \"./progressManager\";\nimport { SupabaseStorageService } from \"./supabaseStorage\";\nimport { readFile, unlink } from \"fs\";\nimport { promisify } from \"util\";\n// @ts-ignore - No type definitions available\nimport AnkiExportModule from 'anki-apkg-export';\nconst AnkiExport = (AnkiExportModule as any).default || AnkiExportModule;\n// Supabase Auth\nimport { setupAuth, isAuthenticated } from \"./supabaseAuth\";\n\nconst unlinkAsync = promisify(unlink);\nconst readFileAsync = promisify(readFile);\n\n// Helper function to batch database operations to avoid connection pool exhaustion\nasync function batchInsert<T, R>(\n  items: T[],\n  insertFn: (item: T) => Promise<R>,\n  batchSize: number = 3\n): Promise<R[]> {\n  const results: R[] = [];\n  \n  for (let i = 0; i < items.length; i += batchSize) {\n    const batch = items.slice(i, i + batchSize);\n    const batchResults = await Promise.all(batch.map(insertFn));\n    results.push(...batchResults);\n  }\n  \n  return results;\n}\n\n// Helper function to upload file to Supabase Storage\nasync function uploadFileToStorage(\n  filePath: string,\n  userId: string,\n  fileName: string,\n  contentType: string\n): Promise<string> {\n  try {\n    const supabaseStorageService = new SupabaseStorageService();\n    \n    // Read file into buffer before uploading\n    const fileBuffer = await readFileAsync(filePath);\n    \n    // Upload file buffer to Supabase Storage\n    const storagePath = await supabaseStorageService.uploadFile(\n      fileBuffer,\n      userId,\n      fileName,\n      contentType\n    );\n\n    return storagePath;\n  } finally {\n    // Always clean up local file, even if upload fails\n    try {\n      await unlinkAsync(filePath);\n    } catch (cleanupError) {\n      console.error(\"Failed to clean up local file:\", filePath, cleanupError);\n    }\n  }\n}\n\nconst storage_config = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, \"uploads/\");\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({\n  storage: storage_config,\n  limits: { fileSize: 100 * 1024 * 1024 },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = [\n      \"application/pdf\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      \"application/msword\",\n      \"text/plain\",\n      \"application/vnd.ms-powerpoint\",\n      \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    ];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Invalid file type\"));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Set up Supabase Auth\n  setupAuth(app);\n  \n  app.post(\"/api/generate/text\", isAuthenticated, async (req, res) => {\n    try {\n      const { content, cardTypes, granularity, customInstructions, title, includeSource, createSubdecks } = req.body;\n      const userId = (req as any).user.id; // Get userId from authenticated session\n\n      if (!content || !cardTypes || !Array.isArray(cardTypes) || cardTypes.length === 0 || granularity === undefined || !title) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      // Validate content length\n      if (content.trim().length === 0) {\n        return res.status(400).json({ error: \"Content cannot be empty\" });\n      }\n      \n      if (content.trim().length < 50) {\n        return res.status(400).json({ error: \"Content is too short (minimum 50 characters required)\" });\n      }\n\n      const sessionId = randomUUID();\n      \n      // Return session ID immediately\n      res.json({ sessionId });\n\n      // Process asynchronously in background\n      (async () => {\n        try {\n          progressManager.setProgress({\n            sessionId,\n            stage: \"analyzing\",\n            message: \"Analyzing text content...\",\n            progress: 10\n          });\n\n          const shouldCreateSubdecks = createSubdecks === 'true';\n          const flashcards = await generateFlashcards({\n            content,\n            cardTypes,\n            granularity,\n            customInstructions: customInstructions || \"\",\n            createSubdecks: shouldCreateSubdecks,\n            onProgress: (update) => {\n              progressManager.setProgress({\n                sessionId,\n                stage: update.stage as any,\n                message: update.message,\n                progress: update.progress,\n                currentStep: update.currentStep,\n                totalSteps: update.totalSteps,\n                cardsGenerated: update.cardsGenerated\n              });\n            }\n          });\n\n          // Validate that flashcards were generated\n          if (!flashcards || flashcards.length === 0) {\n            throw new Error(\"No flashcards were generated. The content may be too short or the AI service is experiencing issues. Please try again.\");\n          }\n\n          progressManager.setProgress({\n            sessionId,\n            stage: \"saving\",\n            message: \"Saving flashcards...\",\n            progress: 90\n          });\n\n          let resultDeckId: string;\n          let totalCardCount: number;\n\n          if (shouldCreateSubdecks && flashcards.some(c => c.subtopic)) {\n            // Create parent deck\n            const parentDeck = await storage.createDeck({\n              userId,\n              title,\n              source: content.substring(0, 100) + \"...\",\n              sourceType: \"text\",\n              cardTypes,\n              granularity,\n              customInstructions: customInstructions || null,\n              includeSource: includeSource || 'false',\n              createSubdecks: 'true'\n            });\n\n            // Group flashcards by subtopic\n            const subdeckGroups = groupFlashcardsBySubtopic(flashcards);\n            \n            // Create subdeck for each subtopic\n            let totalCards = 0;\n            for (const group of subdeckGroups) {\n              const subdeck = await storage.createDeck({\n                userId,\n                parentDeckId: parentDeck.id,\n                title: group.subtopic,\n                source: content.substring(0, 100) + \"...\",\n                sourceType: \"text\",\n                cardTypes,\n                granularity,\n                customInstructions: customInstructions || null,\n                includeSource: includeSource || 'false',\n                createSubdecks: 'false'\n              });\n\n              await batchInsert(\n                group.flashcards.map((card, index) => ({ card, index })),\n                ({ card, index }) => storage.createFlashcard({\n                  deckId: subdeck.id,\n                  question: card.question,\n                  answer: card.answer,\n                  cardType: card.cardType,\n                  position: index,\n                  imageUrl: card.imageUrl || null\n                }),\n                3 // Batch size of 3 to stay well under 5 connection limit\n              );\n\n              totalCards += group.flashcards.length;\n            }\n\n            resultDeckId = parentDeck.id;\n            totalCardCount = totalCards;\n          } else {\n            // Create single deck\n            const deck = await storage.createDeck({\n              userId,\n              title,\n              source: content.substring(0, 100) + \"...\",\n              sourceType: \"text\",\n              cardTypes,\n              granularity,\n              customInstructions: customInstructions || null,\n              includeSource: includeSource || 'false',\n              createSubdecks: 'false'\n            });\n\n            const createdCards = await batchInsert(\n              flashcards.map((card, index) => ({ card, index })),\n              ({ card, index }) => storage.createFlashcard({\n                deckId: deck.id,\n                question: card.question,\n                answer: card.answer,\n                cardType: card.cardType,\n                position: index,\n                imageUrl: card.imageUrl || null\n              }),\n              3 // Batch size of 3 to stay well under 5 connection limit\n            );\n\n            resultDeckId = deck.id;\n            totalCardCount = createdCards.length;\n          }\n\n          progressManager.setProgress({\n            sessionId,\n            stage: \"complete\",\n            message: \"Generation complete!\",\n            progress: 100\n          });\n\n          progressManager.setResult(sessionId, {\n            deckId: resultDeckId,\n            flashcardCount: totalCardCount\n          });\n        } catch (error: any) {\n          console.error(\"Text generation error:\", error);\n          progressManager.setProgress({\n            sessionId,\n            stage: \"error\",\n            message: error.message || \"Generation failed\",\n            progress: 0,\n            error: error.message\n          });\n          progressManager.setResult(sessionId, null);\n        }\n      })();\n    } catch (error: any) {\n      console.error(\"Text generation error:\", error);\n      res.status(500).json({ error: error.message || \"Generation failed\" });\n    }\n  });\n\n  app.post(\"/api/generate/document\", isAuthenticated, upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const { cardTypes, granularity, customInstructions, title, includeSource, createSubdecks, includeImages } = req.body;\n      const userId = (req as any).user.id; // Get userId from authenticated session\n      const sessionId = randomUUID();\n      \n      // Debug logging\n      console.log('📄 Document upload received:');\n      console.log('  File:', req.file.originalname, '(', req.file.mimetype, ')');\n      console.log('  includeImages:', includeImages, '(type:', typeof includeImages, ')');\n      console.log('  includeSource:', includeSource, '(type:', typeof includeSource, ')');\n      console.log('  createSubdecks:', createSubdecks, '(type:', typeof createSubdecks, ')');\n      \n      // Return session ID immediately\n      res.json({ sessionId });\n\n      // Process asynchronously in background\n      (async () => {\n        try {\n          progressManager.setProgress({\n            sessionId,\n            stage: \"extracting\",\n            message: \"Extracting content from document...\",\n            progress: 5\n          });\n\n          const content = await extractContentFromFile(req.file!.path, req.file!.mimetype);\n\n          // Validate extracted content\n          if (!content || content.trim().length === 0) {\n            throw new Error(\"The document appears to be empty. Please check the file and try again.\");\n          }\n          \n          if (content.trim().length < 50) {\n            throw new Error(\"The document content is too short (less than 50 characters). Please provide a document with more content.\");\n          }\n\n          // Extract images if requested and file is PDF\n          let extractedImages: Array<{imageUrl: string, pageNumber: number}> = [];\n          console.log('🔍 Checking image extraction conditions:');\n          console.log('  includeImages:', includeImages, '===', 'true', '?', includeImages === 'true');\n          console.log('  mimetype:', req.file!.mimetype, '===', 'application/pdf', '?', req.file!.mimetype === 'application/pdf');\n          \n          if (includeImages === 'true' && req.file!.mimetype === 'application/pdf') {\n            console.log('✅ Starting image extraction from PDF...');\n            progressManager.setProgress({\n              sessionId,\n              stage: \"extracting\",\n              message: \"Extracting images from PDF...\",\n              progress: 10\n            });\n            extractedImages = await extractImagesFromPDF(req.file!.path, userId, 10);\n            console.log(`📸 Extracted ${extractedImages.length} images from PDF`);\n          } else {\n            console.log('⏭️  Skipping image extraction (conditions not met)');\n          }\n\n          progressManager.setProgress({\n            sessionId,\n            stage: \"analyzing\",\n            message: \"Analyzing document content...\",\n            progress: 15\n          });\n\n          const parsedCardTypes = JSON.parse(cardTypes);\n          const shouldCreateSubdecks = createSubdecks === 'true';\n          const flashcards = await generateFlashcards({\n            content,\n            cardTypes: parsedCardTypes,\n            granularity: parseInt(granularity),\n            customInstructions: customInstructions || \"\",\n            createSubdecks: shouldCreateSubdecks,\n            images: extractedImages.length > 0 ? extractedImages : undefined,\n            onProgress: (update) => {\n              progressManager.setProgress({\n                sessionId,\n                stage: update.stage as any,\n                message: update.message,\n                progress: update.progress,\n                currentStep: update.currentStep,\n                totalSteps: update.totalSteps,\n                cardsGenerated: update.cardsGenerated\n              });\n            }\n          });\n\n          // Validate that flashcards were generated\n          if (!flashcards || flashcards.length === 0) {\n            throw new Error(\"No flashcards were generated. The content may be too short or the AI service is experiencing issues. Please try again.\");\n          }\n\n          progressManager.setProgress({\n            sessionId,\n            stage: \"saving\",\n            message: \"Saving flashcards...\",\n            progress: 90\n          });\n\n          let resultDeckId: string;\n          let totalCardCount: number;\n\n          // Upload file to Supabase Storage only if includeSource is true\n          let fileUrl: string | null = null;\n          if (includeSource === 'true') {\n            try {\n              console.log('⬆️  Uploading source file to Supabase Storage...');\n              fileUrl = await uploadFileToStorage(\n                req.file!.path,\n                userId,\n                req.file!.originalname,\n                req.file!.mimetype\n              );\n              console.log('✅ Source file uploaded:', fileUrl);\n            } catch (uploadError) {\n              console.error(\"❌ Failed to upload file to storage:\", uploadError);\n              // Continue without fileUrl if upload fails\n            }\n          } else {\n            console.log('⏭️  Skipping source file upload (includeSource is false)');\n            // Clean up temporary file since we're not uploading it\n            try {\n              await unlinkAsync(req.file!.path);\n              console.log('🗑️  Cleaned up temporary file');\n            } catch (cleanupError) {\n              console.error(\"Failed to clean up temporary file:\", req.file!.path, cleanupError);\n            }\n          }\n\n          if (shouldCreateSubdecks && flashcards.some(c => c.subtopic)) {\n            // Create parent deck\n            const parentDeck = await storage.createDeck({\n              userId,\n              title,\n              source: req.file!.originalname,\n              sourceType: \"document\",\n              cardTypes: parsedCardTypes,\n              granularity: parseInt(granularity),\n              customInstructions: customInstructions || null,\n              includeSource: includeSource || 'false',\n              createSubdecks: 'true',\n              fileUrl\n            });\n\n            // Group flashcards by subtopic\n            const subdeckGroups = groupFlashcardsBySubtopic(flashcards);\n            \n            // Create subdeck for each subtopic\n            let totalCards = 0;\n            for (const group of subdeckGroups) {\n              const subdeck = await storage.createDeck({\n                userId,\n                parentDeckId: parentDeck.id,\n                title: group.subtopic,\n                source: req.file!.originalname,\n                sourceType: \"document\",\n                cardTypes: parsedCardTypes,\n                granularity: parseInt(granularity),\n                customInstructions: customInstructions || null,\n                includeSource: includeSource || 'false',\n                createSubdecks: 'false'\n              });\n\n              await batchInsert(\n                group.flashcards.map((card, index) => ({ card, index })),\n                ({ card, index }) => storage.createFlashcard({\n                  deckId: subdeck.id,\n                  question: card.question,\n                  answer: card.answer,\n                  cardType: card.cardType,\n                  position: index,\n                  imageUrl: card.imageUrl || null\n                }),\n                3 // Batch size of 3 to stay well under 5 connection limit\n              );\n\n              totalCards += group.flashcards.length;\n            }\n\n            resultDeckId = parentDeck.id;\n            totalCardCount = totalCards;\n          } else {\n            // Create single deck\n            const deck = await storage.createDeck({\n              userId,\n              title,\n              source: req.file!.originalname,\n              sourceType: \"document\",\n              cardTypes: parsedCardTypes,\n              granularity: parseInt(granularity),\n              customInstructions: customInstructions || null,\n              includeSource: includeSource || 'false',\n              createSubdecks: 'false',\n              fileUrl\n            });\n\n            const createdCards = await batchInsert(\n              flashcards.map((card, index) => ({ card, index })),\n              ({ card, index }) => storage.createFlashcard({\n                deckId: deck.id,\n                question: card.question,\n                answer: card.answer,\n                cardType: card.cardType,\n                position: index,\n                imageUrl: card.imageUrl || null\n              }),\n              3 // Batch size of 3 to stay well under 5 connection limit\n            );\n\n            resultDeckId = deck.id;\n            totalCardCount = createdCards.length;\n          }\n\n          progressManager.setProgress({\n            sessionId,\n            stage: \"complete\",\n            message: \"Generation complete!\",\n            progress: 100\n          });\n\n          progressManager.setResult(sessionId, {\n            deckId: resultDeckId,\n            flashcardCount: totalCardCount\n          });\n        } catch (error: any) {\n          console.error(\"Document generation error:\", error);\n          progressManager.setProgress({\n            sessionId,\n            stage: \"error\",\n            message: error.message || \"Generation failed\",\n            progress: 0,\n            error: error.message\n          });\n          progressManager.setResult(sessionId, null);\n        }\n      })();\n    } catch (error: any) {\n      console.error(\"Document generation error:\", error);\n      res.status(500).json({ error: error.message || \"Generation failed\" });\n    }\n  });\n\n  app.post(\"/api/generate/youtube\", isAuthenticated, async (req, res) => {\n    try {\n      const { url, cardTypes, granularity, customInstructions, title, includeSource, createSubdecks, includeImages } = req.body;\n      const userId = (req as any).user.id; // Get userId from authenticated session\n\n      if (!url || !cardTypes || !Array.isArray(cardTypes) || cardTypes.length === 0 || granularity === undefined || !title) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      const sessionId = randomUUID();\n      \n      // Return session ID immediately\n      res.json({ sessionId });\n\n      // Process asynchronously in background\n      (async () => {\n        try {\n          progressManager.setProgress({\n            sessionId,\n            stage: \"extracting\",\n            message: \"Extracting transcript from YouTube video...\",\n            progress: 5\n          });\n\n          const shouldIncludeTimestamps = includeSource === 'true';\n          const content = await extractYouTubeTranscript(url, shouldIncludeTimestamps, () => {\n            // Callback when Whisper fallback is triggered\n            progressManager.setProgress({\n              sessionId,\n              stage: \"extracting\",\n              message: \"No captions found - transcribing audio with AI (this may take a minute)...\",\n              progress: 10\n            });\n          });\n\n          // Validate extracted transcript\n          if (!content || content.trim().length === 0) {\n            throw new Error(\"The video transcript appears to be empty. Please try a different video.\");\n          }\n          \n          if (content.trim().length < 50) {\n            throw new Error(\"The video transcript is too short (less than 50 characters). Please try a longer video.\");\n          }\n\n          // Extract YouTube frames if requested\n          let extractedImages: Array<{imageUrl: string}> = [];\n          if (includeImages === 'true') {\n            progressManager.setProgress({\n              sessionId,\n              stage: \"extracting\",\n              message: \"Extracting video frames...\",\n              progress: 10\n            });\n            const frameUrls = await extractYouTubeFrames(url, userId, 10, 30);\n            extractedImages = frameUrls.map((imageUrl: string) => ({ imageUrl }));\n          }\n\n          progressManager.setProgress({\n            sessionId,\n            stage: \"analyzing\",\n            message: \"Analyzing video transcript...\",\n            progress: 15\n          });\n\n          const shouldCreateSubdecks = createSubdecks === 'true';\n          const flashcards = await generateFlashcards({\n            content,\n            cardTypes,\n            granularity,\n            customInstructions: customInstructions || \"\",\n            createSubdecks: shouldCreateSubdecks,\n            images: extractedImages.length > 0 ? extractedImages : undefined,\n            onProgress: (update) => {\n              progressManager.setProgress({\n                sessionId,\n                stage: update.stage as any,\n                message: update.message,\n                progress: update.progress,\n                currentStep: update.currentStep,\n                totalSteps: update.totalSteps,\n                cardsGenerated: update.cardsGenerated\n              });\n            }\n          });\n\n          // Validate that flashcards were generated\n          if (!flashcards || flashcards.length === 0) {\n            throw new Error(\"No flashcards were generated. The content may be too short or the AI service is experiencing issues. Please try again.\");\n          }\n\n          progressManager.setProgress({\n            sessionId,\n            stage: \"saving\",\n            message: \"Saving flashcards...\",\n            progress: 90\n          });\n\n          let resultDeckId: string;\n          let totalCardCount: number;\n\n          if (shouldCreateSubdecks && flashcards.some(c => c.subtopic)) {\n            // Create parent deck\n            const parentDeck = await storage.createDeck({\n              userId,\n              title,\n              source: url,\n              sourceType: \"youtube\",\n              cardTypes,\n              granularity,\n              customInstructions: customInstructions || null,\n              includeSource: includeSource || 'false',\n              createSubdecks: 'true'\n            });\n\n            // Group flashcards by subtopic\n            const subdeckGroups = groupFlashcardsBySubtopic(flashcards);\n            \n            // Create subdeck for each subtopic\n            let totalCards = 0;\n            for (const group of subdeckGroups) {\n              const subdeck = await storage.createDeck({\n                userId,\n                parentDeckId: parentDeck.id,\n                title: group.subtopic,\n                source: url,\n                sourceType: \"youtube\",\n                cardTypes,\n                granularity,\n                customInstructions: customInstructions || null,\n                includeSource: includeSource || 'false',\n                createSubdecks: 'false'\n              });\n\n              await batchInsert(\n                group.flashcards.map((card, index) => ({ card, index })),\n                ({ card, index }) => storage.createFlashcard({\n                  deckId: subdeck.id,\n                  question: card.question,\n                  answer: card.answer,\n                  cardType: card.cardType,\n                  position: index,\n                  imageUrl: card.imageUrl || null\n                }),\n                3 // Batch size of 3 to stay well under 5 connection limit\n              );\n\n              totalCards += group.flashcards.length;\n            }\n\n            resultDeckId = parentDeck.id;\n            totalCardCount = totalCards;\n          } else {\n            // Create single deck\n            const deck = await storage.createDeck({\n              userId,\n              title,\n              source: url,\n              sourceType: \"youtube\",\n              cardTypes,\n              granularity,\n              customInstructions: customInstructions || null,\n              includeSource: includeSource || 'false',\n              createSubdecks: 'false'\n            });\n\n            const createdCards = await batchInsert(\n              flashcards.map((card, index) => ({ card, index })),\n              ({ card, index }) => storage.createFlashcard({\n                deckId: deck.id,\n                question: card.question,\n                answer: card.answer,\n                cardType: card.cardType,\n                position: index,\n                imageUrl: card.imageUrl || null\n              }),\n              3 // Batch size of 3 to stay well under 5 connection limit\n            );\n\n            resultDeckId = deck.id;\n            totalCardCount = createdCards.length;\n          }\n\n          progressManager.setProgress({\n            sessionId,\n            stage: \"complete\",\n            message: \"Generation complete!\",\n            progress: 100\n          });\n\n          progressManager.setResult(sessionId, {\n            deckId: resultDeckId,\n            flashcardCount: totalCardCount\n          });\n        } catch (error: any) {\n          console.error(\"YouTube generation error:\", error);\n          progressManager.setProgress({\n            sessionId,\n            stage: \"error\",\n            message: error.message || \"Generation failed\",\n            progress: 0,\n            error: error.message\n          });\n          progressManager.setResult(sessionId, null);\n        }\n      })();\n    } catch (error: any) {\n      console.error(\"YouTube generation error:\", error);\n      res.status(500).json({ error: error.message || \"Generation failed\" });\n    }\n  });\n\n  app.get(\"/api/generation/progress/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const progress = progressManager.getProgress(sessionId);\n      \n      if (!progress) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      \n      res.json(progress);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/generation/result/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const result = progressManager.getResult(sessionId);\n      \n      if (result === undefined) {\n        return res.status(404).json({ error: \"Session not found or expired\" });\n      }\n      \n      if (result === null) {\n        return res.status(500).json({ error: \"Generation failed\" });\n      }\n      \n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/decks/user/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const decks = await storage.getDecksByUserId(userId);\n      res.json(decks);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/decks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deck = await storage.getDeck(id);\n      if (!deck) {\n        return res.status(404).json({ error: \"Deck not found\" });\n      }\n      res.json(deck);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/decks/:id/cards\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const cards = await storage.getFlashcardsByDeckId(id);\n      res.json(cards);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/decks/:id/cards/all\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const cards = await storage.getAllFlashcardsWithSubdecks(id);\n      res.json(cards);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/cards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { question, answer } = req.body;\n\n      const updated = await storage.updateFlashcard(id, {\n        question,\n        answer\n      });\n\n      if (!updated) {\n        return res.status(404).json({ error: \"Card not found\" });\n      }\n\n      res.json(updated);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/cards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteFlashcard(id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/cards/:id/learned\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      const learnedSchema = z.object({\n        isLearned: z.boolean()\n      });\n      \n      const validatedData = learnedSchema.parse(req.body);\n\n      const updated = await storage.updateFlashcard(id, {\n        isLearned: validatedData.isLearned,\n        learnedAt: validatedData.isLearned ? new Date() : null\n      });\n\n      if (!updated) {\n        return res.status(404).json({ error: \"Card not found\" });\n      }\n\n      res.json(updated);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/decks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { title, granularity, cardTypes, customInstructions } = req.body;\n\n      const updateData: any = {};\n      if (title !== undefined) updateData.title = title;\n      if (granularity !== undefined) updateData.granularity = granularity;\n      if (cardTypes !== undefined) updateData.cardTypes = cardTypes;\n      if (customInstructions !== undefined) updateData.customInstructions = customInstructions;\n\n      const updated = await storage.updateDeck(id, updateData);\n\n      if (!updated) {\n        return res.status(404).json({ error: \"Deck not found\" });\n      }\n\n      res.json(updated);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/decks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteDeck(id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/decks/:id/export/:format\", async (req, res) => {\n    try {\n      const { id, format } = req.params;\n      const deck = await storage.getDeck(id);\n\n      if (!deck) {\n        return res.status(404).json({ error: \"Deck not found\" });\n      }\n\n      // Helper to build deck path for hierarchy\n      const buildDeckPath = async (deckId: string): Promise<string> => {\n        const currentDeck = await storage.getDeck(deckId);\n        if (!currentDeck) return \"\";\n        \n        if (currentDeck.parentDeckId) {\n          const parentPath = await buildDeckPath(currentDeck.parentDeckId);\n          return parentPath ? `${parentPath}::${currentDeck.title}` : currentDeck.title;\n        }\n        \n        return currentDeck.title;\n      };\n\n      // Get all cards including from subdecks with deck info\n      const getCardsWithDeckInfo = async (deckId: string): Promise<Array<{ card: any; deckPath: string }>> => {\n        const currentDeck = await storage.getDeck(deckId);\n        if (!currentDeck) return [];\n        \n        const deckPath = await buildDeckPath(deckId);\n        const directCards = await storage.getFlashcardsByDeckId(deckId);\n        const cardsWithDeck = directCards.map(card => ({ card, deckPath }));\n        \n        // Get cards from all subdecks recursively\n        const subdecks = await storage.getSubdecks(deckId);\n        for (const subdeck of subdecks) {\n          const subdeckCards = await getCardsWithDeckInfo(subdeck.id);\n          cardsWithDeck.push(...subdeckCards);\n        }\n        \n        return cardsWithDeck;\n      };\n\n      const allCardsWithDeck = await getCardsWithDeckInfo(id);\n      const allCards = allCardsWithDeck.map(item => item.card);\n\n      switch (format) {\n        case \"json\":\n          res.setHeader(\"Content-Type\", \"application/json\");\n          res.setHeader(\"Content-Disposition\", `attachment; filename=\"${deck.title}.json\"`);\n          res.json({ deck, flashcards: allCards });\n          break;\n\n        case \"csv\":\n          const csvRows = [\"Deck,Question,Answer,Type,ImageURL\"];\n          allCardsWithDeck.forEach(({ card, deckPath }) => {\n            const row = [\n              `\"${deckPath.replace(/\"/g, '\"\"')}\"`,\n              `\"${card.question.replace(/\"/g, '\"\"')}\"`,\n              `\"${card.answer.replace(/\"/g, '\"\"')}\"`,\n              card.cardType,\n              card.imageUrl ? `\"${card.imageUrl.replace(/\"/g, '\"\"')}\"` : '\"\"'\n            ];\n            csvRows.push(row.join(\",\"));\n          });\n          res.setHeader(\"Content-Type\", \"text/csv\");\n          res.setHeader(\"Content-Disposition\", `attachment; filename=\"${deck.title}.csv\"`);\n          res.send(csvRows.join(\"\\n\"));\n          break;\n\n        case \"anki\":\n          // Group cards by deck path to preserve hierarchy\n          const deckGroups = new Map<string, any[]>();\n          \n          allCardsWithDeck.forEach(({ card, deckPath }) => {\n            if (!deckGroups.has(deckPath)) {\n              deckGroups.set(deckPath, []);\n            }\n            deckGroups.get(deckPath)!.push(card);\n          });\n\n          // If there's only one deck (no subdecks), use simple export\n          if (deckGroups.size === 1 && deckGroups.has(deck.title)) {\n            const apkg = new AnkiExport(deck.title);\n            \n            // Download and add images to package\n            const imageMap = new Map<string, string>();\n            for (const card of allCards) {\n              if (card.imageUrl && !imageMap.has(card.imageUrl)) {\n                try {\n                  const response = await fetch(card.imageUrl);\n                  if (response.ok) {\n                    const buffer = await response.arrayBuffer();\n                    const imageExtension = card.imageUrl.split('.').pop()?.split('?')[0] || 'jpg';\n                    const filename = `image_${imageMap.size + 1}.${imageExtension}`;\n                    apkg.addMedia(filename, Buffer.from(buffer));\n                    imageMap.set(card.imageUrl, filename);\n                  }\n                } catch (err) {\n                  console.error(`Failed to fetch image ${card.imageUrl}:`, err);\n                }\n              }\n            }\n            \n            allCards.forEach((card: any) => {\n              let question = card.question;\n              let answer = card.answer;\n              \n              // Add image to question if available and downloaded\n              if (card.imageUrl && imageMap.has(card.imageUrl)) {\n                const filename = imageMap.get(card.imageUrl);\n                question = `<img src=\"${filename}\" style=\"max-width: 100%; max-height: 300px; display: block; margin: 10px auto;\" /><br/>${question}`;\n              }\n              \n              if (card.cardType === \"cloze\") {\n                const clozeParts = question.split(\"[blank]\");\n                if (clozeParts.length > 1) {\n                  question = clozeParts[0] + `{{c1::${answer}}}` + clozeParts.slice(1).join(\"[blank]\");\n                  answer = \"\";\n                }\n              }\n              \n              apkg.addCard(question, answer);\n            });\n            \n            const zipData = await apkg.save();\n            res.setHeader(\"Content-Type\", \"application/octet-stream\");\n            res.setHeader(\"Content-Disposition\", `attachment; filename=\"${deck.title}.apkg\"`);\n            res.send(Buffer.from(zipData, 'binary'));\n          } else {\n            // Export with subdeck tags for organization\n            // Note: anki-apkg-export creates one deck per .apkg file\n            // We use tags to indicate subdeck membership so users can reorganize in Anki\n            const apkg = new AnkiExport(deck.title);\n            \n            // Download and add images to package\n            const imageMap = new Map<string, string>();\n            for (const card of allCards) {\n              if (card.imageUrl && !imageMap.has(card.imageUrl)) {\n                try {\n                  const response = await fetch(card.imageUrl);\n                  if (response.ok) {\n                    const buffer = await response.arrayBuffer();\n                    const imageExtension = card.imageUrl.split('.').pop()?.split('?')[0] || 'jpg';\n                    const filename = `image_${imageMap.size + 1}.${imageExtension}`;\n                    apkg.addMedia(filename, Buffer.from(buffer));\n                    imageMap.set(card.imageUrl, filename);\n                  }\n                } catch (err) {\n                  console.error(`Failed to fetch image ${card.imageUrl}:`, err);\n                }\n              }\n            }\n            \n            for (const [deckPath, cards] of Array.from(deckGroups.entries())) {\n              cards.forEach((card: any) => {\n                let question = card.question;\n                let answer = card.answer;\n                \n                // Add image to question if available and downloaded\n                if (card.imageUrl && imageMap.has(card.imageUrl)) {\n                  const filename = imageMap.get(card.imageUrl);\n                  question = `<img src=\"${filename}\" style=\"max-width: 100%; max-height: 300px; display: block; margin: 10px auto;\" /><br/>${question}`;\n                }\n                \n                if (card.cardType === \"cloze\") {\n                  const clozeParts = question.split(\"[blank]\");\n                  if (clozeParts.length > 1) {\n                    question = clozeParts[0] + `{{c1::${answer}}}` + clozeParts.slice(1).join(\"[blank]\");\n                    answer = \"\";\n                  }\n                }\n                \n                // Use full deck path as tag to preserve hierarchy\n                // Replace :: with _ and normalize spaces for Anki tag format\n                const hierarchyTag = deckPath.replace(/::/g, '_').replace(/\\s+/g, '_');\n                \n                // Add card with full hierarchy path as tag\n                apkg.addCard(question, answer, { \n                  tags: [hierarchyTag] \n                });\n              });\n            }\n            \n            const zipData = await apkg.save();\n            res.setHeader(\"Content-Type\", \"application/octet-stream\");\n            res.setHeader(\"Content-Disposition\", `attachment; filename=\"${deck.title}.apkg\"`);\n            res.send(Buffer.from(zipData, 'binary'));\n          }\n          break;\n\n        default:\n          res.status(400).json({ error: \"Invalid export format\" });\n      }\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Replit Auth - Get current user (from blueprint:javascript_log_in_with_replit)\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":40903},"client/src/components/FeatureSection.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Brain, Sliders, Edit3, Download, ShieldCheck, Clock, FileStack, Microscope, Palette } from \"lucide-react\";\nimport { motion, useScroll, useTransform } from \"framer-motion\";\nimport { useRef } from \"react\";\n\nconst features = [\n  {\n    icon: Brain,\n    title: \"Active Recall Engine\",\n    description: \"Every flashcard forces retrieval practice—the #1 scientifically-proven method to move info from short-term cramming to long-term memory\",\n    gradient: \"from-primary/20 to-accent/20\"\n  },\n  {\n    icon: Clock,\n    title: \"Built for Spaced Repetition\",\n    description: \"Seamless Anki export means you'll review cards exactly when your brain is about to forget them. Science-backed, retention-maximized.\",\n    gradient: \"from-accent/20 to-primary/20\"\n  },\n  {\n    icon: ShieldCheck,\n    title: \"Zero Hallucinations\",\n    description: \"We only pull from YOUR source material. No made-up facts, no fictional drugs, no mystery mechanisms. Your textbook = your flashcards.\",\n    gradient: \"from-primary/20 via-accent/20 to-primary/20\"\n  },\n  {\n    icon: Microscope,\n    title: \"Med School Optimized\",\n    description: \"Designed for anatomy atlases, pharmacology tables, pathology slides, and those brutal biochem pathways. We get it—because we built it for us.\",\n    gradient: \"from-accent/20 to-primary/20\"\n  },\n  {\n    icon: FileStack,\n    title: \"Any Format, Any Source\",\n    description: \"PDFs from faculty, DOCX notes, YouTube lectures, PowerPoints. 200-page textbook chapters? Bring it. We handle the heavy lifting.\",\n    gradient: \"from-primary/20 to-accent/20\"\n  },\n  {\n    icon: Sliders,\n    title: \"Granularity Control\",\n    description: \"Need just high-yield facts? Or every single detail? Slide the dial. From \\\"Step 1 core concepts\\\" to \\\"shelf exam minutiae\\\"—you decide.\",\n    gradient: \"from-accent/20 via-primary/20 to-accent/20\"\n  },\n  {\n    icon: Palette,\n    title: \"Custom Instructions\",\n    description: \"Tell the AI exactly what you want: \\\"focus on definitions\\\", \\\"skip dates\\\", \\\"include clinical correlations\\\". Your deck, your rules, your way.\",\n    gradient: \"from-primary/20 via-accent/20 to-primary/20\"\n  },\n  {\n    icon: Edit3,\n    title: \"Full Editing Freedom\",\n    description: \"Hate a phrasing? Change it. Want to add a mnemonic? Do it. Organize by systems, diseases, or drugs. These are YOUR cards.\",\n    gradient: \"from-primary/20 to-accent/20\"\n  },\n  {\n    icon: Download,\n    title: \"Export Anywhere\",\n    description: \"One-click .apkg for Anki. CSV for spreadsheets. JSON for nerds. Study on your phone, tablet, laptop—wherever muscle memory kicks in.\",\n    gradient: \"from-accent/20 to-primary/20\"\n  }\n];\n\nconst containerVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.06\n    }\n  }\n};\n\nconst itemVariants = {\n  hidden: { opacity: 0, y: 30, scale: 0.95 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    scale: 1,\n    transition: { duration: 0.5, ease: \"easeOut\" }\n  }\n};\n\nexport default function FeatureSection() {\n  const ref = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start end\", \"end start\"]\n  });\n\n  const y = useTransform(scrollYProgress, [0, 1], [100, -100]);\n  const opacity = useTransform(scrollYProgress, [0, 0.3, 0.7, 1], [0, 1, 1, 0]);\n\n  return (\n    <div ref={ref} id=\"features\" className=\"relative py-20 md:py-32 px-4 sm:px-6 lg:px-8 overflow-hidden\">\n      {/* Parallax background effects */}\n      <motion.div \n        className=\"absolute top-1/4 right-0 w-[400px] h-[400px] bg-gradient-to-bl from-primary/15 to-transparent rounded-full blur-3xl\"\n        style={{ y, opacity }}\n        animate={{\n          scale: [1, 1.15, 1],\n        }}\n        transition={{\n          duration: 12,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }}\n      />\n\n      <div className=\"relative z-10 max-w-7xl mx-auto\">\n        <motion.div \n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.8 }}\n        >\n          <motion.h2 \n            className=\"font-display text-4xl md:text-5xl lg:text-6xl font-bold mb-6\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n          >\n            <span className=\"bg-gradient-to-r from-foreground via-primary to-foreground bg-clip-text text-transparent\">\n              Built Different,\n            </span>\n            <br />\n            <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              Because Med School Is\n            </span>\n          </motion.h2>\n          <motion.p \n            className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.8, delay: 0.3 }}\n          >\n            Features designed by med students who were{\" \"}\n            <span className=\"text-primary font-semibold\">tired of forgetting everything</span>{\" \"}\n            they just studied\n          </motion.p>\n        </motion.div>\n\n        <motion.div \n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true }}\n        >\n          {features.map((feature, i) => (\n            <motion.div \n              key={i} \n              variants={itemVariants}\n              whileHover={{ y: -12, scale: 1.03 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n            >\n              <Card className={`relative group p-6 h-full bg-gradient-to-br ${feature.gradient} backdrop-blur-xl border-primary/20 overflow-visible cursor-pointer`}>\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-br from-primary/10 via-accent/10 to-transparent opacity-0 group-hover:opacity-100 rounded-lg\"\n                  transition={{ duration: 0.4 }}\n                />\n                <motion.div\n                  className=\"relative\"\n                  whileHover={{ scale: 1.15, rotate: [0, -5, 5, 0] }}\n                  transition={{ duration: 0.5 }}\n                >\n                  <div className=\"w-14 h-14 bg-gradient-to-br from-primary to-accent rounded-xl flex items-center justify-center mb-5 shadow-lg shadow-primary/30 group-hover:shadow-primary/50 transition-shadow\">\n                    <feature.icon className=\"w-7 h-7 text-primary-foreground\" />\n                  </div>\n                </motion.div>\n                <motion.h3 \n                  className=\"font-display text-xl font-semibold mb-3 text-foreground group-hover:text-primary transition-colors duration-300\"\n                  whileHover={{ x: 5 }}\n                  transition={{ duration: 0.3 }}\n                >\n                  {feature.title}\n                </motion.h3>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  {feature.description}\n                </p>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7448},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Layers, Zap, Coins, FileText, Youtube, Type, MoreVertical, Edit, Trash, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const userId = user?.id;\n  const { toast } = useToast();\n\n  const { data: decks, isLoading } = useQuery({\n    queryKey: ['/api/decks/user', userId],\n    queryFn: async () => {\n      if (!userId) return [];\n      const res = await apiRequest(\"GET\", `/api/decks/user/${userId}`);\n      return await res.json();\n    },\n    enabled: !!userId,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (deckId: string) => {\n      await apiRequest(\"DELETE\", `/api/decks/${deckId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/decks/user', userId] });\n      toast({\n        title: \"Deck deleted\",\n        description: \"Your deck has been successfully deleted\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete deck\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getSourceIcon = (sourceType: string) => {\n    switch (sourceType) {\n      case \"document\": return FileText;\n      case \"youtube\": return Youtube;\n      case \"text\": return Type;\n      default: return FileText;\n    }\n  };\n\n  // Filter out subdecks, only show parent decks on dashboard\n  const parentDecks = decks?.filter((deck: any) => !deck.parentDeckId) || [];\n  \n  const totalCards = decks?.reduce((sum: number, deck: any) => sum + (deck.cardCount || 0), 0) || 0;\n  // Credits logic will be implemented later\n  const creditsRemaining = 1000;\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-display font-bold\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Welcome back! Here's your learning progress</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <motion.div \n            className=\"flex items-center gap-3 bg-gradient-to-r from-primary/20 to-accent/20 border border-primary/30 px-6 py-3 rounded-xl\"\n            whileHover={{ scale: 1.02 }}\n          >\n            <Coins className=\"w-5 h-5 text-primary\" />\n            <div>\n              <p className=\"text-xs text-muted-foreground\">Credits Remaining</p>\n              <p className=\"text-lg font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                {creditsRemaining.toLocaleString()}\n              </p>\n            </div>\n          </motion.div>\n          <Link href=\"/generate\">\n            <Button data-testid=\"button-new-deck\" className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Deck\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <Card className=\"bg-gradient-to-br from-card to-card/80 border-primary/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Total Decks\n              </CardTitle>\n              <Layers className=\"w-5 h-5 text-primary\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-4xl font-display font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                {parentDecks.length}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">Active collections</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.1 }}\n        >\n          <Card className=\"bg-gradient-to-br from-card to-card/80 border-primary/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Total Cards\n              </CardTitle>\n              <Zap className=\"w-5 h-5 text-accent\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-4xl font-display font-bold bg-gradient-to-r from-accent to-primary bg-clip-text text-transparent\">\n                {totalCards}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">Generated with AI</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      <div>\n        <h2 className=\"text-xl font-display font-semibold mb-4\">Recent Decks</h2>\n        \n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n          </div>\n        ) : parentDecks.length === 0 ? (\n          <Card className=\"p-12 text-center bg-gradient-to-br from-card to-card/80 border-primary/20\">\n            <p className=\"text-muted-foreground mb-4\">No decks yet. Create your first flashcard deck!</p>\n            <Link href=\"/generate\">\n              <Button className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Deck\n              </Button>\n            </Link>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {parentDecks.map((deck: any, index: number) => {\n              const SourceIcon = getSourceIcon(deck.sourceType);\n              return (\n                <motion.div\n                  key={deck.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                >\n                  <Card className=\"hover-elevate transition-all duration-200 bg-gradient-to-br from-card to-card/80 border-primary/20\">\n                    <CardHeader className=\"flex flex-row items-start justify-between gap-4 space-y-0 pb-3\">\n                      <div className=\"flex-1 min-w-0\">\n                        <CardTitle className=\"text-lg font-display truncate\">{deck.title}</CardTitle>\n                        <CardDescription className=\"flex items-center gap-2 mt-2 flex-wrap\">\n                          <SourceIcon className=\"w-3 h-3\" />\n                          <span>{deck.sourceType}</span>\n                          <span>•</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">{deck.cardType}</Badge>\n                        </CardDescription>\n                      </div>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button size=\"icon\" variant=\"ghost\" data-testid={`button-menu-${deck.id}`}>\n                            <MoreVertical className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem asChild>\n                            <Link href={`/editor/${deck.id}`}>\n                              <a className=\"flex items-center\">\n                                <Edit className=\"w-4 h-4 mr-2\" />\n                                Edit\n                              </a>\n                            </Link>\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => deleteMutation.mutate(deck.id)}\n                            className=\"text-destructive\"\n                            data-testid={`menu-delete-${deck.id}`}\n                          >\n                            <Trash className=\"w-4 h-4 mr-2\" />\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </CardHeader>\n                    <CardContent className=\"flex items-center gap-4 pt-0\">\n                      <Link href={`/study/${deck.id}`}>\n                        <Button variant=\"default\" size=\"sm\" data-testid={`button-study-${deck.id}`} className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90\">\n                          Study Now\n                        </Button>\n                      </Link>\n                      <span className=\"text-sm text-muted-foreground\">\n                        Created {new Date(deck.createdAt).toLocaleDateString()}\n                      </span>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9756},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/pages/landing.tsx":{"content":"import LandingNav from \"@/components/LandingNav\";\nimport Hero from \"@/components/Hero\";\nimport FeatureSection from \"@/components/FeatureSection\";\nimport HowItWorks from \"@/components/HowItWorks\";\nimport CTASection from \"@/components/CTASection\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      <LandingNav />\n      <Hero />\n      <HowItWorks />\n      <FeatureSection />\n      <CTASection />\n    </div>\n  );\n}\n","size_bytes":450},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/examples/RecentDecks.tsx":{"content":"import RecentDecks from '../RecentDecks';\n\nexport default function RecentDecksExample() {\n  return (\n    <div className=\"p-8 max-w-4xl\">\n      <RecentDecks />\n    </div>\n  );\n}\n","size_bytes":177},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/examples/CTASection.tsx":{"content":"import CTASection from '../CTASection';\n\nexport default function CTASectionExample() {\n  return <CTASection />;\n}\n","size_bytes":114},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/DashboardStats.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Layers, Zap, Calendar, TrendingUp } from \"lucide-react\";\n\nconst stats = [\n  { title: \"Total Decks\", value: \"12\", icon: Layers, change: \"+2 this week\" },\n  { title: \"Cards Generated\", value: \"248\", icon: Zap, change: \"+34 today\" },\n  { title: \"Study Streak\", value: \"7 days\", icon: Calendar, change: \"Keep it up!\" },\n  { title: \"Cards Mastered\", value: \"186\", icon: TrendingUp, change: \"+12 today\" },\n];\n\nexport default function DashboardStats() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats.map((stat, i) => (\n        <Card key={i}>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              {stat.title}\n            </CardTitle>\n            <stat.icon className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-display font-bold\">{stat.value}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">{stat.change}</p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1252},"client/src/components/examples/SettingsPanel.tsx":{"content":"import SettingsPanel from '../SettingsPanel';\n\nexport default function SettingsPanelExample() {\n  return (\n    <div className=\"p-8\">\n      <SettingsPanel />\n    </div>\n  );\n}\n","size_bytes":175},"client/src/pages/generate.tsx":{"content":"import GenerationForm from \"@/components/GenerationForm\";\n\nexport default function Generate() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-display font-bold\">Generate Flashcards</h1>\n        <p className=\"text-muted-foreground mt-1\">Transform your content into study materials</p>\n      </div>\n      <GenerationForm />\n    </div>\n  );\n}\n","size_bytes":386},"client/src/components/examples/Hero.tsx":{"content":"import Hero from '../Hero';\n\nexport default function HeroExample() {\n  return <Hero />;\n}\n","size_bytes":90},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 25% 12%;\n\n  --foreground: 210 20% 92%;\n\n  --border: 220 20% 20%;\n\n  --card: 220 22% 16%;\n\n  --card-foreground: 210 20% 92%;\n\n  --card-border: 220 20% 22%;\n\n  --sidebar: 220 25% 14%;\n\n  --sidebar-foreground: 210 20% 92%;\n\n  --sidebar-border: 220 20% 18%;\n\n  --sidebar-primary: 200 90% 50%;\n\n  --sidebar-primary-foreground: 220 20% 10%;\n\n  --sidebar-accent: 200 40% 20%;\n\n  --sidebar-accent-foreground: 200 80% 75%;\n\n  --sidebar-ring: 200 90% 50%;\n\n  --popover: 220 25% 16%;\n\n  --popover-foreground: 210 20% 92%;\n\n  --popover-border: 220 20% 22%;\n\n  --primary: 200 90% 50%;\n\n  --primary-foreground: 220 20% 10%;\n\n  --secondary: 220 20% 22%;\n\n  --secondary-foreground: 210 20% 92%;\n\n  --muted: 220 20% 20%;\n\n  --muted-foreground: 215 15% 60%;\n\n  --accent: 175 60% 50%;\n\n  --accent-foreground: 175 20% 95%;\n\n  --destructive: 0 70% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 15% 85%;\n  --ring: 200 95% 45%;\n  --chart-1: 200 95% 45%;\n  --chart-2: 175 70% 50%;\n  --chart-3: 158 64% 52%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 270 70% 60%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(215 25% 27% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(215 25% 27% / 0.10);\n  --shadow-sm: 0px 2px 4px 0px hsl(215 25% 27% / 0.08), 0px 1px 2px -1px hsl(215 25% 27% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(215 25% 27% / 0.10), 0px 2px 4px -2px hsl(215 25% 27% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(215 25% 27% / 0.12), 0px 3px 7px -3px hsl(215 25% 27% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(215 25% 27% / 0.15), 0px 4px 10px -4px hsl(215 25% 27% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(215 25% 27% / 0.18), 0px 8px 15px -6px hsl(215 25% 27% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(215 25% 27% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 30% 8%;\n\n  --foreground: 210 20% 95%;\n\n  --border: 220 25% 16%;\n\n  --card: 220 28% 12%;\n\n  --card-foreground: 210 20% 95%;\n\n  --card-border: 220 25% 18%;\n\n  --sidebar: 220 30% 10%;\n\n  --sidebar-foreground: 210 20% 95%;\n\n  --sidebar-border: 220 25% 14%;\n\n  --sidebar-primary: 200 95% 55%;\n\n  --sidebar-primary-foreground: 220 25% 8%;\n\n  --sidebar-accent: 200 50% 18%;\n\n  --sidebar-accent-foreground: 200 80% 75%;\n\n  --sidebar-ring: 200 95% 55%;\n\n  --popover: 220 30% 12%;\n\n  --popover-foreground: 210 20% 95%;\n\n  --popover-border: 220 25% 18%;\n\n  --primary: 200 95% 55%;\n\n  --primary-foreground: 220 25% 8%;\n\n  --secondary: 220 25% 18%;\n\n  --secondary-foreground: 210 20% 95%;\n\n  --muted: 220 25% 16%;\n\n  --muted-foreground: 215 15% 65%;\n\n  --accent: 175 60% 55%;\n\n  --accent-foreground: 175 20% 95%;\n\n  --destructive: 0 70% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 215 20% 30%;\n  --ring: 200 95% 50%;\n  --chart-1: 200 95% 50%;\n  --chart-2: 175 60% 55%;\n  --chart-3: 158 64% 60%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 270 70% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.40), 0px 2px 4px -2px hsl(0 0% 0% / 0.35);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.45), 0px 3px 7px -3px hsl(0 0% 0% / 0.40);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.50), 0px 4px 10px -4px hsl(0 0% 0% / 0.45);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.55), 0px 8px 15px -6px hsl(0 0% 0% / 0.50);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.65);\n\n  /* Automatically computed borders */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    background: linear-gradient(-45deg, hsl(var(--background)), hsl(var(--card)), hsl(var(--background)), hsl(var(--card)/0.5));\n    background-size: 400% 400%;\n    animation: breathingGradient 20s ease infinite;\n  }\n\n  @keyframes breathingGradient {\n    0%, 100% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n  }\n\n  /* Custom Scrollbar - Modern & Minimal */\n  * {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(var(--primary)/0.5) transparent;\n  }\n\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--background));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--primary)/0.4);\n    border-radius: 4px;\n    transition: background 0.2s;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--primary)/0.6);\n  }\n\n  /* Respect reduced motion preference */\n  @media (prefers-reduced-motion: reduce) {\n    body {\n      animation: none;\n    }\n    * {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n    }\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":12124},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/examples/AuthForm.tsx":{"content":"import AuthForm from '../AuthForm';\n\nexport default function AuthFormExample() {\n  return <AuthForm mode=\"login\" />;\n}\n","size_bytes":119},"client/src/components/CTASection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowRight, CheckCircle, Trophy } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\n\nexport default function CTASection() {\n  return (\n    <div className=\"relative py-20 md:py-32 px-4 sm:px-6 lg:px-8 overflow-hidden\">\n      {/* Simplified animated background */}\n      <motion.div \n        className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-accent/20 to-primary/20\"\n        animate={{\n          opacity: [0.3, 0.4, 0.3],\n        }}\n        transition={{\n          duration: 8,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }}\n      />\n      <motion.div \n        className=\"absolute top-0 right-0 w-[500px] h-[500px] bg-gradient-to-bl from-primary/30 to-transparent rounded-full blur-3xl\"\n        animate={{\n          scale: [1, 1.15, 1],\n          opacity: [0.3, 0.4, 0.3],\n        }}\n        transition={{\n          duration: 12,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }}\n      />\n\n      <div className=\"relative z-10 max-w-5xl mx-auto\">\n        <motion.div \n          className=\"relative overflow-hidden rounded-3xl bg-gradient-to-br from-card/80 via-card/60 to-card/80 backdrop-blur-2xl p-10 md:p-16 lg:p-20 border border-primary/30 shadow-2xl shadow-primary/20\"\n          initial={{ opacity: 0, y: 40, scale: 0.95 }}\n          whileInView={{ opacity: 1, y: 0, scale: 1 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.8 }}\n        >\n          <div className=\"relative z-10\">\n            <div className=\"text-center mb-12\">\n              <motion.div\n                className=\"inline-flex items-center gap-2 bg-gradient-to-r from-primary/15 to-accent/15 border border-primary/20 text-foreground px-5 py-2 rounded-full mb-6\"\n                initial={{ opacity: 0, scale: 0.9 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                viewport={{ once: true }}\n                transition={{ duration: 0.6, delay: 0.2 }}\n                whileHover={{ scale: 1.05 }}\n              >\n                <Trophy className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-semibold\">Made by Med Students, For Med Students</span>\n              </motion.div>\n\n              <motion.h2 \n                className=\"font-display text-3xl md:text-4xl lg:text-5xl font-bold mb-6 leading-[1.15] pb-2\"\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ duration: 0.8, delay: 0.3 }}\n              >\n                <span className=\"bg-gradient-to-r from-foreground to-foreground/90 bg-clip-text text-transparent pb-1\">\n                  Reclaim Your Time.\n                </span>\n                <br />\n                <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent pb-1\">\n                  Master the Material.\n                </span>\n              </motion.h2>\n\n              <motion.p \n                className=\"text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto mb-10\"\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ duration: 0.8, delay: 0.4 }}\n              >\n                We built this because we were{\" \"}\n                <span className=\"text-foreground font-semibold\">exhausted</span>—tired of wasting half our study sessions{\" \"}\n                <span className=\"italic\">building</span> flashcards instead of{\" \"}\n                <span className=\"text-primary font-semibold\">using</span> them.{\" \"}\n                <span className=\"block mt-4\">Now thousands of med students walk into exams confident. Join them.</span>\n              </motion.p>\n            </div>\n\n            <motion.div \n              className=\"flex flex-col sm:flex-row items-center justify-center gap-6 mb-12\"\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.8, delay: 0.5 }}\n            >\n              <Link href=\"/signup\">\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <Button \n                    size=\"lg\" \n                    className=\"w-full sm:w-auto bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 h-14 px-10 text-lg font-semibold shadow-2xl shadow-primary/40\"\n                    data-testid=\"button-start-free\"\n                  >\n                    Stop Wasting Time—Start Now\n                    <ArrowRight className=\"ml-2 w-5 h-5\" />\n                  </Button>\n                </motion.div>\n              </Link>\n            </motion.div>\n\n            <motion.div \n              className=\"flex flex-col sm:flex-row items-center justify-center gap-8 text-muted-foreground\"\n              initial={{ opacity: 0 }}\n              whileInView={{ opacity: 1 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n            >\n              {[\n                \"No credit card required\",\n                \"Free forever\",\n                \"Works with Anki\"\n              ].map((text, i) => (\n                <motion.div \n                  key={i}\n                  className=\"flex items-center gap-2\"\n                  initial={{ opacity: 0, x: -15 }}\n                  whileInView={{ opacity: 1, x: 0 }}\n                  viewport={{ once: true }}\n                  transition={{ duration: 0.5, delay: 0.7 + i * 0.1 }}\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <CheckCircle className=\"w-5 h-5 text-primary\" />\n                  <span className=\"text-sm font-medium\">{text}</span>\n                </motion.div>\n              ))}\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6074},"client/src/components/RecentDecks.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Youtube, Type, MoreVertical, Edit, Trash } from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Link } from \"wouter\";\n\nconst decks = [\n  {\n    id: \"1\",\n    title: \"Biology Chapter 5: Cell Structure\",\n    cardCount: 24,\n    source: \"PDF Document\",\n    sourceIcon: FileText,\n    lastStudied: \"2 hours ago\",\n    cardType: \"Q&A\"\n  },\n  {\n    id: \"2\",\n    title: \"JavaScript ES6 Features\",\n    cardCount: 18,\n    source: \"YouTube Video\",\n    sourceIcon: Youtube,\n    lastStudied: \"Yesterday\",\n    cardType: \"Cloze\"\n  },\n  {\n    id: \"3\",\n    title: \"World War II Timeline\",\n    cardCount: 32,\n    source: \"Text Input\",\n    sourceIcon: Type,\n    lastStudied: \"3 days ago\",\n    cardType: \"Reverse\"\n  }\n];\n\nexport default function RecentDecks() {\n  return (\n    <div className=\"space-y-4\">\n      {decks.map((deck) => (\n        <Card key={deck.id} className=\"hover-elevate transition-all duration-200\">\n          <CardHeader className=\"flex flex-row items-start justify-between gap-4 space-y-0 pb-3\">\n            <div className=\"flex-1 min-w-0\">\n              <CardTitle className=\"text-lg font-display truncate\">{deck.title}</CardTitle>\n              <CardDescription className=\"flex items-center gap-2 mt-2 flex-wrap\">\n                <deck.sourceIcon className=\"w-3 h-3\" />\n                <span>{deck.source}</span>\n                <span>•</span>\n                <span>{deck.cardCount} cards</span>\n                <span>•</span>\n                <Badge variant=\"outline\" className=\"text-xs\">{deck.cardType}</Badge>\n              </CardDescription>\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button size=\"icon\" variant=\"ghost\" data-testid={`button-menu-${deck.id}`}>\n                  <MoreVertical className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem data-testid={`menu-edit-${deck.id}`}>\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuItem data-testid={`menu-delete-${deck.id}`} className=\"text-destructive\">\n                  <Trash className=\"w-4 h-4 mr-2\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </CardHeader>\n          <CardContent className=\"flex items-center gap-4 pt-0\">\n            <Link href={`/editor/${deck.id}`}>\n              <Button variant=\"default\" size=\"sm\" data-testid={`button-study-${deck.id}`}>\n                Study Now\n              </Button>\n            </Link>\n            <span className=\"text-sm text-muted-foreground\">Last studied {deck.lastStudied}</span>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3136},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/editor.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Edit, Trash2, Plus, Save, Download, Loader2, Eye, BookOpen } from \"lucide-react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport FlashcardPreview from \"@/components/FlashcardPreview\";\n\nexport default function Editor() {\n  const params = useParams();\n  const deckId = params.id as string;\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);\n  const [editedQuestion, setEditedQuestion] = useState(\"\");\n  const [editedAnswer, setEditedAnswer] = useState(\"\");\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [cardToDelete, setCardToDelete] = useState<string | null>(null);\n\n  const { data: cards, isLoading } = useQuery({\n    queryKey: ['/api/decks', deckId, 'cards', 'all'],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/decks/${deckId}/cards/all`);\n      return await res.json();\n    },\n    enabled: !!deckId,\n  });\n\n  const { data: deck } = useQuery({\n    queryKey: ['/api/decks', deckId],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/decks/${deckId}`);\n      return await res.json();\n    },\n    enabled: !!deckId,\n  });\n\n  const selectedCard = cards?.find((c: any) => c.id === selectedCardId);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { id: string; question: string; answer: string }) => {\n      await apiRequest(\"PUT\", `/api/cards/${data.id}`, {\n        question: data.question,\n        answer: data.answer,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/decks', deckId, 'cards', 'all'] });\n      toast({\n        title: \"Card updated\",\n        description: \"Your changes have been saved\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update card\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/cards/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/decks', deckId, 'cards', 'all'] });\n      toast({\n        title: \"Card deleted\",\n        description: \"The flashcard has been removed\",\n      });\n      setSelectedCardId(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete card\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSelectCard = (card: any) => {\n    setSelectedCardId(card.id);\n    setEditedQuestion(card.question);\n    setEditedAnswer(card.answer);\n  };\n\n  const handleSave = () => {\n    if (selectedCardId) {\n      updateMutation.mutate({\n        id: selectedCardId,\n        question: editedQuestion,\n        answer: editedAnswer,\n      });\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    setCardToDelete(id);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (cardToDelete) {\n      deleteMutation.mutate(cardToDelete);\n    }\n    setDeleteDialogOpen(false);\n    setCardToDelete(null);\n  };\n\n  const handleExport = (format: string) => {\n    window.open(`/api/decks/${deckId}/export/${format}`, '_blank');\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"qa\": return \"bg-primary/10 text-primary border-primary/20\";\n      case \"cloze\": return \"bg-[hsl(258,90%,66%)]/10 text-[hsl(258,90%,66%)] border-[hsl(258,90%,66%)]/20\";\n      case \"reverse\": return \"bg-[hsl(158,64%,52%)]/10 text-[hsl(158,64%,52%)] border-[hsl(158,64%,52%)]/20\";\n      default: return \"\";\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"qa\": return \"Q&A\";\n      case \"cloze\": return \"Cloze\";\n      case \"reverse\": return \"Reverse\";\n      default: return type;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-24\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!cards || cards.length === 0) {\n    return (\n      <div className=\"text-center py-24\">\n        <p className=\"text-muted-foreground\">No cards found in this deck</p>\n      </div>\n    );\n  }\n\n  if (!selectedCard && cards.length > 0) {\n    handleSelectCard(cards[0]);\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-display font-bold\">{deck?.title || \"Flashcard Editor\"}</h1>\n          <p className=\"text-muted-foreground mt-1\">Edit and preview your flashcards</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={() => setLocation(`/study/${deckId}`)} \n            variant=\"default\" \n            size=\"sm\"\n            data-testid=\"button-study\"\n          >\n            <BookOpen className=\"w-4 h-4 mr-2\" />\n            Study\n          </Button>\n          <Button onClick={() => handleExport(\"json\")} variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            JSON\n          </Button>\n          <Button onClick={() => handleExport(\"csv\")} variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            CSV\n          </Button>\n          <Button onClick={() => handleExport(\"anki\")} variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Anki\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"edit\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"edit\" data-testid=\"tab-edit\">\n            <Edit className=\"w-4 h-4 mr-2\" />\n            Edit Cards\n          </TabsTrigger>\n          <TabsTrigger value=\"preview\" data-testid=\"tab-preview\">\n            <Eye className=\"w-4 h-4 mr-2\" />\n            Preview\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"edit\" className=\"mt-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-18rem)]\">\n            <Card className=\"lg:col-span-1\">\n              <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-4\">\n                <CardTitle className=\"text-lg font-display\">Cards ({cards.length})</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <ScrollArea className=\"h-[calc(100vh-24rem)]\">\n                  <div className=\"space-y-2 px-6 pb-6\">\n                    {cards.map((card: any) => (\n                      <div\n                        key={card.id}\n                        className={`p-4 border-l-4 rounded-md cursor-pointer hover-elevate transition-all ${\n                          selectedCardId === card.id\n                            ? \"bg-accent border-l-primary\"\n                            : \"border-l-transparent hover:bg-muted\"\n                        }`}\n                        onClick={() => handleSelectCard(card)}\n                        data-testid={`card-item-${card.id}`}\n                      >\n                        <div className=\"flex items-start justify-between gap-2 mb-2\">\n                          <p className=\"text-sm font-medium line-clamp-2 flex-1\">{card.question}</p>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-6 w-6 flex-shrink-0\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleDelete(card.id);\n                            }}\n                            data-testid={`button-delete-${card.id}`}\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                        <Badge variant=\"outline\" className={`text-xs ${getTypeColor(card.cardType)}`}>\n                          {getTypeLabel(card.cardType)}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-display flex items-center gap-2\">\n                  <Edit className=\"w-5 h-5\" />\n                  Edit Card\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {selectedCard ? (\n                  <>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Question / Front</label>\n                      <Textarea\n                        value={editedQuestion}\n                        onChange={(e) => setEditedQuestion(e.target.value)}\n                        className=\"min-h-32 resize-y\"\n                        placeholder=\"Enter question...\"\n                        data-testid=\"textarea-question\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Answer / Back</label>\n                      <Textarea\n                        value={editedAnswer}\n                        onChange={(e) => setEditedAnswer(e.target.value)}\n                        className=\"min-h-32 resize-y\"\n                        placeholder=\"Enter answer...\"\n                        data-testid=\"textarea-answer\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className={getTypeColor(selectedCard.cardType)}>\n                        {getTypeLabel(selectedCard.cardType)}\n                      </Badge>\n                    </div>\n\n                    <Button \n                      onClick={handleSave} \n                      className=\"w-full\" \n                      data-testid=\"button-save\"\n                      disabled={updateMutation.isPending}\n                    >\n                      {updateMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Saving...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"w-4 h-4 mr-2\" />\n                          Save Changes\n                        </>\n                      )}\n                    </Button>\n                  </>\n                ) : (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    Select a card to edit\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"preview\" className=\"mt-6\">\n          {selectedCard && (\n            <FlashcardPreview\n              question={selectedCard.question}\n              answer={selectedCard.answer}\n              cardType={selectedCard.cardType}\n              imageUrl={selectedCard.imageUrl}\n            />\n          )}\n        </TabsContent>\n      </Tabs>\n\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Card?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the flashcard.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmDelete} data-testid=\"button-confirm-delete\">\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":12869},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Brain } from \"lucide-react\";\n\nexport default function Login() {\n  const [_, setLocation] = useLocation();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        const errorMessage = data.error === \"Email not confirmed\" \n          ? \"Please check your email and click the confirmation link to activate your account.\"\n          : data.error || \"Failed to login\";\n        \n        toast({\n          title: data.error === \"Email not confirmed\" ? \"Email not confirmed\" : \"Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      } else {\n        // Set the session in Supabase client\n        if (data.session) {\n          await supabase.auth.setSession(data.session);\n        }\n        setLocation(\"/dashboard\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-teal-50 to-orange-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-primary/10 p-3 rounded-full\">\n              <Brain className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center\">Welcome back</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your credentials to access your account\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleLogin}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                data-testid=\"input-email\"\n                type=\"email\"\n                placeholder=\"name@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                data-testid=\"input-password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button \n              data-testid=\"button-login\" \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n            >\n              {isLoading ? \"Signing in...\" : \"Sign in\"}\n            </Button>\n            <div className=\"text-sm text-center text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link href=\"/signup\" data-testid=\"link-signup\">\n                <span className=\"text-primary hover:underline cursor-pointer\">Sign up</span>\n              </Link>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4243},"client/src/components/HowItWorks.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Upload, Sparkles, Edit, Download, ArrowRight, Zap } from \"lucide-react\";\nimport { motion, useScroll, useTransform } from \"framer-motion\";\nimport { useRef } from \"react\";\n\nconst steps = [\n  {\n    number: \"01\",\n    icon: Upload,\n    title: \"Dump Your Content\",\n    description: \"Upload that 200-page PDF you've been dreading. Or paste YouTube lecture links. Or copy-paste your notes. We handle it all.\",\n    color: \"from-primary/30 to-accent/20\",\n    iconColor: \"text-primary\"\n  },\n  {\n    number: \"02\",\n    icon: Sparkles,\n    title: \"AI Extracts the Gold\",\n    description: \"Our system identifies every testable fact, mechanism, and clinical pearl. No fluff, no hallucinations—just what you actually need to know.\",\n    color: \"from-accent/30 to-primary/20\",\n    iconColor: \"text-accent\"\n  },\n  {\n    number: \"03\",\n    icon: Edit,\n    title: \"Review & Perfect\",\n    description: \"Every card is editable. Adjust phrasing, add mnemonics, organize by topic. Make it yours.\",\n    color: \"from-primary/20 to-accent/30\",\n    iconColor: \"text-primary\"\n  },\n  {\n    number: \"04\",\n    icon: Download,\n    title: \"Export & Conquer\",\n    description: \"One-click export to Anki for spaced repetition. Watch your retention skyrocket while your classmates are still highlighting textbooks.\",\n    color: \"from-accent/20 to-primary/30\",\n    iconColor: \"text-accent\"\n  }\n];\n\nexport default function HowItWorks() {\n  const ref = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: [\"start end\", \"end start\"]\n  });\n\n  const scale = useTransform(scrollYProgress, [0, 0.5, 1], [0.8, 1, 0.8]);\n  const opacity = useTransform(scrollYProgress, [0, 0.2, 0.8, 1], [0, 1, 1, 0]);\n\n  return (\n    <div ref={ref} id=\"how-it-works\" className=\"relative py-20 md:py-32 px-4 sm:px-6 lg:px-8 overflow-hidden bg-gradient-to-br from-background to-card/30\">\n      {/* Background effects with parallax */}\n      <motion.div \n        className=\"absolute top-0 left-1/4 w-[400px] h-[400px] bg-gradient-to-br from-primary/10 to-transparent rounded-full blur-3xl\"\n        style={{ scale, opacity }}\n        animate={{\n          rotate: [0, 360],\n        }}\n        transition={{\n          duration: 20,\n          repeat: Infinity,\n          ease: \"linear\"\n        }}\n      />\n\n      <div className=\"relative z-10 max-w-7xl mx-auto\">\n        <motion.div \n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.8 }}\n        >\n          <motion.h2 \n            className=\"font-display text-4xl md:text-5xl lg:text-6xl font-bold mb-6\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n          >\n            <span className=\"bg-gradient-to-r from-foreground via-primary to-foreground bg-clip-text text-transparent\">\n              How It Works\n            </span>\n          </motion.h2>\n          <motion.p \n            className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.8, delay: 0.3 }}\n          >\n            From lecture chaos to{\" \"}\n            <span className=\"text-primary font-semibold\">organized mastery</span> in 4 simple steps\n          </motion.p>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {steps.map((step, i) => (\n            <motion.div\n              key={i}\n              initial={{ opacity: 0, y: 40 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6, delay: i * 0.1 }}\n            >\n              <Card className={`relative h-full p-6 bg-gradient-to-br ${step.color} backdrop-blur-xl border-primary/20 overflow-visible hover-elevate group`}>\n                <div className=\"absolute -top-4 -left-4 w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-xl flex items-center justify-center shadow-xl shadow-primary/30\">\n                  <span className=\"font-display text-lg font-bold text-primary-foreground\">\n                    {step.number}\n                  </span>\n                </div>\n\n                <div className=\"mt-6 mb-4\">\n                  <motion.div\n                    whileHover={{ scale: 1.1, rotate: -5 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    <div className={`w-14 h-14 bg-gradient-to-br from-card to-background/50 rounded-xl flex items-center justify-center border border-primary/20`}>\n                      <step.icon className={`w-7 h-7 ${step.iconColor}`} />\n                    </div>\n                  </motion.div>\n                </div>\n\n                <h3 className=\"font-display text-xl font-bold mb-3 text-foreground group-hover:text-primary transition-colors\">\n                  {step.title}\n                </h3>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  {step.description}\n                </p>\n\n                {i < steps.length - 1 && (\n                  <motion.div \n                    className=\"hidden lg:block absolute -right-8 top-1/2 -translate-y-1/2 text-primary/50 z-10\"\n                    animate={{\n                      x: [0, 5, 0],\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <ArrowRight className=\"w-8 h-8\" />\n                  </motion.div>\n                )}\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          className=\"mt-12 text-center\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.8, delay: 0.5 }}\n        >\n          <p className=\"text-sm text-muted-foreground italic\">\n            Average time from upload to Anki-ready deck:{\" \"}\n            <span className=\"text-primary font-semibold not-italic\">under 3 minutes</span>\n          </p>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6508},"client/src/components/LandingNav.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Sparkles } from \"lucide-react\";\nimport { motion, useScroll } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\nexport default function LandingNav() {\n  const { scrollY } = useScroll();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const { isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    return scrollY.on(\"change\", (latest) => {\n      setIsScrolled(latest > 50);\n    });\n  }, [scrollY]);\n\n  const scrollToSection = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const handleGetStarted = () => {\n    if (isAuthenticated) {\n      setLocation(\"/dashboard\");\n    } else {\n      setLocation(\"/login\");\n    }\n  };\n\n  return (\n    <motion.nav\n      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n        isScrolled\n          ? \"bg-background/80 backdrop-blur-xl border-b border-border shadow-lg\"\n          : \"bg-transparent\"\n      }`}\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n      transition={{ duration: 0.6, ease: \"easeOut\" }}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <motion.div\n            className=\"flex items-center gap-2\"\n            whileHover={{ scale: 1.05 }}\n          >\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-6 h-6 text-primary\" />\n              <span className=\"font-display text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                FlashGenius\n              </span>\n            </div>\n          </motion.div>\n\n          <div className=\"hidden md:flex items-center gap-8\">\n            <button\n              onClick={() => scrollToSection(\"features\")}\n              className=\"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"nav-features\"\n            >\n              Features\n            </button>\n            <button\n              onClick={() => scrollToSection(\"how-it-works\")}\n              className=\"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\"\n              data-testid=\"nav-how-it-works\"\n            >\n              How It Works\n            </button>\n          </div>\n\n          <div className=\"flex items-center gap-3\">\n            {isAuthenticated ? (\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/dashboard\")}\n                className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 shadow-lg shadow-primary/20\"\n                data-testid=\"nav-dashboard\"\n              >\n                Dashboard\n              </Button>\n            ) : (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setLocation(\"/login\")}\n                  className=\"text-sm font-medium\"\n                  data-testid=\"nav-login\"\n                >\n                  Sign In\n                </Button>\n                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.98 }}>\n                  <Button\n                    size=\"sm\"\n                    onClick={handleGetStarted}\n                    className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 shadow-lg shadow-primary/20\"\n                    data-testid=\"nav-get-started\"\n                  >\n                    Get Started\n                  </Button>\n                </motion.div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </motion.nav>\n  );\n}\n","size_bytes":3953},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/neon-serverless';\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport * as schema from '@shared/schema';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL environment variable is required');\n}\n\n// In development, use fetch adapter instead of WebSocket to avoid SSL issues\nif (process.env.NODE_ENV === 'development') {\n  neonConfig.fetchConnectionCache = true;\n  neonConfig.poolQueryViaFetch = true;\n}\n\n// Configure pool with connection limits to avoid \"Too many connections\" errors\nconst pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 5, // Limit to 5 concurrent connections (Neon free tier allows ~10)\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 10000,\n});\n\nexport const db = drizzle(pool, { schema });\n","size_bytes":809},"server/objectStorage.ts":{"content":"// Referenced from blueprint:javascript_object_storage\nimport { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n\n  // Upload image buffer to object storage\n  async uploadImageBuffer(\n    imageBuffer: Buffer,\n    userId: string,\n    imageName: string = \"image.png\"\n  ): Promise<string> {\n    try {\n      // Get upload URL\n      const uploadURL = await this.getObjectEntityUploadURL();\n      \n      // Upload image buffer\n      const response = await fetch(uploadURL, {\n        method: 'PUT',\n        body: imageBuffer,\n        headers: {\n          'Content-Type': 'image/png',\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to upload image to storage: ${response.statusText}`);\n      }\n\n      // Set ACL policy and get path\n      const aclResponse = await this.trySetObjectEntityAclPolicy(\n        uploadURL,\n        {\n          owner: userId,\n          visibility: \"public\" // Images need to be publicly accessible for flashcards\n        }\n      );\n\n      // Normalize to canonical /objects/... format\n      const objectPath = this.normalizeObjectEntityPath(aclResponse);\n\n      // Validate the normalized path\n      if (!objectPath || typeof objectPath !== 'string' || !objectPath.startsWith(\"/objects/\")) {\n        throw new Error(\"Image upload failed - invalid object path\");\n      }\n\n      return objectPath;\n    } catch (error) {\n      console.error(\"Failed to upload image:\", error);\n      throw error;\n    }\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":9802},"server/objectAcl.ts":{"content":"// Referenced from blueprint:javascript_object_storage\nimport { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5599},"client/src/pages/study.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, ArrowRight, RotateCw, X, CheckCircle2 } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function Study() {\n  const params = useParams();\n  const deckId = params.id as string;\n  const [, setLocation] = useLocation();\n  \n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const { data: cards, isLoading } = useQuery({\n    queryKey: ['/api/decks', deckId, 'cards', 'all'],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/decks/${deckId}/cards/all`);\n      return await res.json();\n    },\n    enabled: !!deckId,\n  });\n\n  const { data: deck } = useQuery({\n    queryKey: ['/api/decks', deckId],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/decks/${deckId}`);\n      return await res.json();\n    },\n    enabled: !!deckId,\n  });\n\n  const toggleLearnedMutation = useMutation({\n    mutationFn: async ({ cardId, isLearned }: { cardId: string; isLearned: boolean }) => {\n      const res = await apiRequest(\"PUT\", `/api/cards/${cardId}/learned`, { isLearned });\n      return await res.json();\n    },\n    onSuccess: async () => {\n      await queryClient.refetchQueries({ queryKey: ['/api/decks', deckId, 'cards', 'all'] });\n    },\n  });\n\n  const currentCard = cards?.[currentIndex];\n  const learnedCount = cards?.filter((card: any) => card.isLearned).length || 0;\n  const progress = cards ? ((currentIndex + 1) / cards.length) * 100 : 0;\n\n  const handleFlip = useCallback(() => {\n    setIsFlipped(prev => !prev);\n  }, []);\n\n  const handleNext = useCallback(() => {\n    if (cards && currentIndex < cards.length - 1) {\n      setCurrentIndex(prev => prev + 1);\n      setIsFlipped(false);\n    }\n  }, [cards, currentIndex]);\n\n  const handlePrevious = useCallback(() => {\n    if (currentIndex > 0) {\n      setCurrentIndex(prev => prev - 1);\n      setIsFlipped(false);\n    }\n  }, [currentIndex]);\n\n  const handleReset = useCallback(() => {\n    setCurrentIndex(0);\n    setIsFlipped(false);\n  }, []);\n\n  const handleExit = useCallback(() => {\n    setLocation(`/editor/${deckId}`);\n  }, [deckId, setLocation]);\n\n  const handleToggleLearned = useCallback((checked: boolean) => {\n    if (currentCard) {\n      toggleLearnedMutation.mutate({\n        cardId: currentCard.id,\n        isLearned: checked,\n      });\n    }\n  }, [currentCard, toggleLearnedMutation]);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.code === 'Space') {\n        e.preventDefault();\n        handleFlip();\n      } else if (e.code === 'ArrowRight') {\n        e.preventDefault();\n        handleNext();\n      } else if (e.code === 'ArrowLeft') {\n        e.preventDefault();\n        handlePrevious();\n      } else if (e.code === 'Escape') {\n        e.preventDefault();\n        handleExit();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleFlip, handleNext, handlePrevious, handleExit]);\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"qa\": return \"bg-primary/10 text-primary border-primary/20\";\n      case \"cloze\": return \"bg-[hsl(258,90%,66%)]/10 text-[hsl(258,90%,66%)] border-[hsl(258,90%,66%)]/20\";\n      case \"reverse\": return \"bg-[hsl(158,64%,52%)]/10 text-[hsl(158,64%,52%)] border-[hsl(158,64%,52%)]/20\";\n      default: return \"\";\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"qa\": return \"Q&A\";\n      case \"cloze\": return \"Cloze\";\n      case \"reverse\": return \"Reverse\";\n      default: return type;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading flashcards...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!cards || cards.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground mb-4\">No cards found in this deck</p>\n          <Button onClick={handleExit} variant=\"outline\">\n            Return to Editor\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* Header */}\n      <div className=\"border-b bg-card/50 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"container max-w-6xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleExit}\n                data-testid=\"button-exit-study\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n              <div>\n                <h1 className=\"text-xl font-display font-bold\">{deck?.title || \"Study Mode\"}</h1>\n                <div className=\"flex items-center gap-3 text-sm text-muted-foreground\">\n                  <span>Card {currentIndex + 1} of {cards.length}</span>\n                  <span className=\"text-muted-foreground/50\">•</span>\n                  <span className=\"flex items-center gap-1\">\n                    <CheckCircle2 className=\"w-3.5 h-3.5 text-green-500\" />\n                    {learnedCount} learned\n                  </span>\n                </div>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleReset}\n              data-testid=\"button-reset\"\n            >\n              <RotateCw className=\"w-4 h-4 mr-2\" />\n              Reset\n            </Button>\n          </div>\n          <Progress value={progress} className=\"h-2\" data-testid=\"progress-bar\" />\n        </div>\n      </div>\n\n      {/* Main Card Area */}\n      <div className=\"flex-1 flex items-center justify-center p-4 sm:p-8\">\n        <div className=\"w-full max-w-4xl\">\n          <div\n            className=\"relative cursor-pointer perspective-1000\"\n            onClick={handleFlip}\n            data-testid=\"flashcard\"\n          >\n            <div\n              className={`relative w-full transition-transform duration-500 transform-style-3d ${\n                isFlipped ? 'rotate-y-180' : ''\n              }`}\n              style={{\n                transformStyle: 'preserve-3d',\n                transform: isFlipped ? 'rotateY(180deg)' : 'rotateY(0deg)',\n              }}\n            >\n              {/* Front */}\n              <Card\n                className={`w-full min-h-[400px] flex items-center justify-center backface-hidden ${\n                  isFlipped ? 'invisible' : 'visible'\n                }`}\n                style={{\n                  backfaceVisibility: 'hidden',\n                }}\n              >\n                <CardContent className=\"p-8 sm:p-12 text-center w-full overflow-auto\">\n                  <div className=\"mb-6\">\n                    <Badge variant=\"outline\" className={`text-xs ${getTypeColor(currentCard?.cardType)}`}>\n                      {getTypeLabel(currentCard?.cardType)}\n                    </Badge>\n                  </div>\n                  {currentCard?.imageUrl && (\n                    <div className=\"mb-6\">\n                      <img \n                        src={currentCard.imageUrl} \n                        alt=\"Flashcard visual\" \n                        className=\"max-w-full max-h-64 mx-auto rounded-md object-contain\"\n                        data-testid=\"image-flashcard\"\n                      />\n                    </div>\n                  )}\n                  <p className=\"text-2xl sm:text-3xl md:text-4xl font-medium leading-relaxed whitespace-pre-wrap\">\n                    {currentCard?.question}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-8\">\n                    Click or press <kbd className=\"px-2 py-1 bg-muted rounded text-xs\">Space</kbd> to flip\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Back */}\n              <Card\n                className={`absolute top-0 left-0 w-full min-h-[400px] flex items-center justify-center backface-hidden ${\n                  isFlipped ? 'visible' : 'invisible'\n                }`}\n                style={{\n                  backfaceVisibility: 'hidden',\n                  transform: 'rotateY(180deg)',\n                }}\n              >\n                <CardContent className=\"p-8 sm:p-12 text-center w-full\">\n                  <div className=\"mb-6\">\n                    <Badge variant=\"outline\" className=\"text-xs bg-accent/50\">\n                      Answer\n                    </Badge>\n                  </div>\n                  <div className=\"text-xl sm:text-2xl md:text-3xl leading-relaxed whitespace-pre-wrap\">\n                    {currentCard?.answer}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-8\">\n                    Click or press <kbd className=\"px-2 py-1 bg-muted rounded text-xs\">Space</kbd> to flip back\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <div className=\"flex flex-col items-center gap-4 mt-8\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={handlePrevious}\n                disabled={currentIndex === 0}\n                data-testid=\"button-previous\"\n              >\n                <ArrowLeft className=\"w-5 h-5 mr-2\" />\n                Previous\n              </Button>\n              <div className=\"text-sm text-muted-foreground\">\n                <kbd className=\"px-2 py-1 bg-muted rounded text-xs\">←</kbd>\n                {\" \"}/{\" \"}\n                <kbd className=\"px-2 py-1 bg-muted rounded text-xs\">→</kbd>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={handleNext}\n                disabled={currentIndex === cards.length - 1}\n                data-testid=\"button-next\"\n              >\n                Next\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Button>\n            </div>\n\n            {/* Mark as Learned */}\n            <div className=\"flex items-center gap-2\">\n              <Checkbox\n                id=\"learned-checkbox\"\n                checked={currentCard?.isLearned || false}\n                onCheckedChange={handleToggleLearned}\n                disabled={toggleLearnedMutation.isPending}\n                data-testid=\"checkbox-learned\"\n              />\n              <Label\n                htmlFor=\"learned-checkbox\"\n                className=\"text-sm text-muted-foreground cursor-pointer select-none\"\n              >\n                Mark as learned\n              </Label>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Keyboard Shortcuts Help */}\n      <div className=\"border-t bg-card/30 backdrop-blur-sm\">\n        <div className=\"container max-w-6xl mx-auto px-4 py-3\">\n          <div className=\"flex flex-wrap items-center justify-center gap-4 text-xs text-muted-foreground\">\n            <span className=\"flex items-center gap-2\">\n              <kbd className=\"px-2 py-1 bg-muted rounded\">Space</kbd> Flip card\n            </span>\n            <span className=\"flex items-center gap-2\">\n              <kbd className=\"px-2 py-1 bg-muted rounded\">←</kbd> Previous\n            </span>\n            <span className=\"flex items-center gap-2\">\n              <kbd className=\"px-2 py-1 bg-muted rounded\">→</kbd> Next\n            </span>\n            <span className=\"flex items-center gap-2\">\n              <kbd className=\"px-2 py-1 bg-muted rounded\">Esc</kbd> Exit\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12648},"server/imageExtractor.ts":{"content":"import { pdf } from \"pdf-to-img\";\nimport { SupabaseStorageService } from \"./supabaseStorage\";\nimport { Innertube } from \"youtubei.js\";\nimport { spawn } from \"child_process\";\nimport { writeFileSync, unlinkSync, mkdirSync } from \"fs\";\nimport { join } from \"path\";\nimport { tmpdir } from \"os\";\n\nexport interface ExtractedImage {\n  imageUrl: string;\n  pageNumber: number;\n}\n\n/**\n * Extract images from a PDF file by converting each page to an image\n * Uploads images to object storage and returns their URLs\n */\nexport async function extractImagesFromPDF(\n  filePath: string,\n  userId: string,\n  maxImages: number = 5\n): Promise<ExtractedImage[]> {\n  const extractedImages: ExtractedImage[] = [];\n  const failedPages: number[] = [];\n  let totalPagesProcessed = 0;\n  \n  try {\n    console.log(`📄 Starting PDF image extraction from: ${filePath}`);\n    console.log(`  Max images: ${maxImages}`);\n    \n    const supabaseStorageService = new SupabaseStorageService();\n    const document = await pdf(filePath, { scale: 2 });\n    \n    console.log('✅ PDF document loaded, converting pages to images...');\n    \n    let pageNumber = 1;\n    for await (const imageBuffer of document) {\n      totalPagesProcessed++;\n      \n      if (extractedImages.length >= maxImages) {\n        console.log(`⏸️  Reached max images limit (${maxImages}), stopping extraction`);\n        break;\n      }\n      \n      try {\n        console.log(`  📸 Processing page ${pageNumber}...`);\n        \n        // Upload image to storage with one retry on failure\n        let imageUrl: string | null = null;\n        let lastError: any = null;\n        \n        for (let attempt = 0; attempt < 2; attempt++) {\n          try {\n            imageUrl = await supabaseStorageService.uploadImageBuffer(\n              imageBuffer,\n              userId,\n              `pdf-page-${pageNumber}.png`\n            );\n            break; // Success, exit retry loop\n          } catch (err) {\n            lastError = err;\n            if (attempt === 0) {\n              console.log(`  ⚠️  Upload failed for page ${pageNumber}, retrying...`);\n              await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1s before retry\n            }\n          }\n        }\n        \n        if (!imageUrl) {\n          throw lastError || new Error('Upload failed after retries');\n        }\n        \n        console.log(`  ✅ Uploaded page ${pageNumber} to: ${imageUrl}`);\n        \n        extractedImages.push({\n          imageUrl,\n          pageNumber\n        });\n      } catch (uploadError) {\n        console.error(`  ❌ Failed to upload image for page ${pageNumber} after retries:`, uploadError);\n        failedPages.push(pageNumber);\n      }\n      \n      pageNumber++;\n    }\n    \n    // Report summary\n    console.log(`\\n=== PDF IMAGE EXTRACTION SUMMARY ===`);\n    console.log(`Total pages processed: ${totalPagesProcessed}`);\n    console.log(`Successfully extracted: ${extractedImages.length} images`);\n    \n    if (failedPages.length > 0) {\n      console.error(`❌ Failed to extract ${failedPages.length} images from pages: ${failedPages.join(', ')}`);\n    }\n    \n    if (extractedImages.length === 0 && totalPagesProcessed > 0) {\n      console.error(`⚠️  WARNING: All image extractions failed! No images available for flashcards.`);\n    } else if (extractedImages.length > 0) {\n      console.log(`✓ Image extraction completed successfully`);\n    }\n    \n    return extractedImages;\n  } catch (error) {\n    console.error(\"❌ CRITICAL ERROR extracting images from PDF:\", error);\n    console.error(\"No images will be available for this generation\");\n    return [];\n  }\n}\n\n/**\n * Extract thumbnail from YouTube video\n * Returns the high-quality thumbnail URL\n */\nexport async function extractYouTubeThumbnail(\n  videoUrl: string,\n  userId: string\n): Promise<string | null> {\n  try {\n    // Extract video ID from URL\n    const videoId = extractYouTubeVideoId(videoUrl);\n    if (!videoId) {\n      return null;\n    }\n    \n    // Get high-quality thumbnail URL from YouTube\n    const thumbnailUrl = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;\n    \n    // Fetch thumbnail\n    const response = await fetch(thumbnailUrl);\n    if (!response.ok) {\n      // Fallback to standard quality if maxres not available\n      const fallbackUrl = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;\n      const fallbackResponse = await fetch(fallbackUrl);\n      if (!fallbackResponse.ok) {\n        return null;\n      }\n      const buffer = Buffer.from(await fallbackResponse.arrayBuffer());\n      const supabaseStorageService = new SupabaseStorageService();\n      return await supabaseStorageService.uploadImageBuffer(buffer, userId, `youtube-${videoId}.jpg`);\n    }\n    \n    const buffer = Buffer.from(await response.arrayBuffer());\n    const supabaseStorageService = new SupabaseStorageService();\n    return await supabaseStorageService.uploadImageBuffer(buffer, userId, `youtube-${videoId}.jpg`);\n  } catch (error) {\n    console.error(\"Error extracting YouTube thumbnail:\", error);\n    return null;\n  }\n}\n\n/**\n * Extract frames from YouTube video at regular intervals\n * Returns array of image URLs uploaded to object storage\n */\nexport async function extractYouTubeFrames(\n  videoUrl: string,\n  userId: string,\n  maxFrames: number = 10,\n  intervalSeconds: number = 30\n): Promise<string[]> {\n  const extractedFrames: string[] = [];\n  const videoId = extractYouTubeVideoId(videoUrl);\n  \n  if (!videoId) {\n    console.error(\"Invalid YouTube URL\");\n    return [];\n  }\n\n  try {\n    // Initialize Innertube client\n    const youtube = await Innertube.create();\n    const info = await youtube.getInfo(videoId);\n    \n    // Get best video format (preferably with both video and audio)\n    const format = info.chooseFormat({ \n      quality: 'medium',\n      type: 'video+audio'\n    });\n    \n    // Decipher the stream URL\n    format.decipher(youtube.session.player);\n    \n    const streamUrl = format.url;\n    if (!streamUrl) {\n      console.error(\"No stream URL available after deciphering\");\n      return [];\n    }\n\n    // Create temp directory for frames\n    const tempDir = join(tmpdir(), `youtube-frames-${videoId}-${Date.now()}`);\n    mkdirSync(tempDir, { recursive: true });\n\n    try {\n      // Calculate frame extraction rate (1 frame every intervalSeconds)\n      const fps = `1/${intervalSeconds}`;\n      \n      // Use ffmpeg to extract frames\n      await new Promise<void>((resolve, reject) => {\n        const ffmpeg = spawn('ffmpeg', [\n          '-i', streamUrl,\n          '-vf', `fps=${fps}`,\n          '-frames:v', maxFrames.toString(),\n          '-q:v', '2', // High quality\n          join(tempDir, 'frame-%03d.jpg')\n        ]);\n\n        let errorOutput = '';\n        ffmpeg.stderr.on('data', (data) => {\n          errorOutput += data.toString();\n        });\n\n        ffmpeg.on('close', (code) => {\n          if (code === 0) {\n            resolve();\n          } else {\n            reject(new Error(`ffmpeg exited with code ${code}: ${errorOutput}`));\n          }\n        });\n\n        ffmpeg.on('error', (err) => {\n          reject(err);\n        });\n      });\n\n      // Upload extracted frames to Supabase Storage\n      const supabaseStorageService = new SupabaseStorageService();\n      const fs = await import('fs/promises');\n      const files = await fs.readdir(tempDir);\n      \n      for (const file of files.sort()) {\n        if (file.endsWith('.jpg')) {\n          try {\n            const frameBuffer = await fs.readFile(join(tempDir, file));\n            const imageUrl = await supabaseStorageService.uploadImageBuffer(\n              frameBuffer,\n              userId,\n              `youtube-${videoId}-${file}`\n            );\n            extractedFrames.push(imageUrl);\n          } catch (uploadError) {\n            console.error(`Failed to upload frame ${file}:`, uploadError);\n          }\n        }\n      }\n\n      return extractedFrames;\n    } finally {\n      // Cleanup temp directory (runs on success or failure)\n      try {\n        const fs = await import('fs/promises');\n        await fs.rm(tempDir, { recursive: true, force: true });\n      } catch (cleanupError) {\n        console.error(`Failed to cleanup temp directory ${tempDir}:`, cleanupError);\n      }\n    }\n  } catch (error) {\n    console.error(\"Error extracting YouTube frames:\", error);\n    return [];\n  }\n}\n\n/**\n * Extract video ID from YouTube URL\n */\nfunction extractYouTubeVideoId(url: string): string | null {\n  const patterns = [\n    /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/,\n    /youtube\\.com\\/embed\\/([^&\\n?#]+)/,\n    /youtube\\.com\\/v\\/([^&\\n?#]+)/\n  ];\n  \n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match && match[1]) {\n      return match[1];\n    }\n  }\n  \n  return null;\n}\n","size_bytes":8767},"client/src/components/DeckSettingsDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Loader2 } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DeckSettingsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  deck: {\n    id: string;\n    title: string;\n    granularity: number;\n    cardTypes: string[];\n    customInstructions?: string | null;\n    userId: string;\n  };\n}\n\nexport default function DeckSettingsDialog({ open, onOpenChange, deck }: DeckSettingsDialogProps) {\n  const [title, setTitle] = useState(deck.title);\n  const [cardTypes, setCardTypes] = useState({\n    qa: deck.cardTypes.includes(\"qa\"),\n    cloze: deck.cardTypes.includes(\"cloze\"),\n    reverse: deck.cardTypes.includes(\"reverse\"),\n  });\n  const [granularity, setGranularity] = useState([deck.granularity]);\n  const [customInstructions, setCustomInstructions] = useState(deck.customInstructions || \"\");\n  const { toast } = useToast();\n\n  // Reset form state when dialog opens or deck changes\n  useEffect(() => {\n    if (open) {\n      setTitle(deck.title);\n      setCardTypes({\n        qa: deck.cardTypes.includes(\"qa\"),\n        cloze: deck.cardTypes.includes(\"cloze\"),\n        reverse: deck.cardTypes.includes(\"reverse\"),\n      });\n      setGranularity([deck.granularity]);\n      setCustomInstructions(deck.customInstructions || \"\");\n    }\n  }, [open, deck]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"PUT\", `/api/decks/${deck.id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/decks/user', deck.userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/decks', deck.id] });\n      toast({\n        title: \"Settings updated\",\n        description: \"Your deck settings have been saved successfully.\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update deck settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const selectedCardTypes = Object.entries(cardTypes)\n      .filter(([_, selected]) => selected)\n      .map(([type, _]) => type);\n\n    if (selectedCardTypes.length === 0) {\n      toast({\n        title: \"Invalid settings\",\n        description: \"Please select at least one card type.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateMutation.mutate({\n      title,\n      granularity: granularity[0],\n      cardTypes: selectedCardTypes,\n      customInstructions: customInstructions || null,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-deck-settings\">\n        <DialogHeader>\n          <DialogTitle>Deck Settings</DialogTitle>\n          <DialogDescription>\n            Update your deck's configuration and regeneration settings\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Deck Title</Label>\n            <Input\n              id=\"title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              placeholder=\"Enter deck title\"\n              data-testid=\"input-deck-title\"\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Card Types</Label>\n            <div className=\"flex flex-col gap-2\">\n              <div className=\"flex items-center gap-2\">\n                <Checkbox\n                  id=\"qa\"\n                  checked={cardTypes.qa}\n                  onCheckedChange={(checked) => setCardTypes({ ...cardTypes, qa: checked as boolean })}\n                  data-testid=\"checkbox-qa\"\n                />\n                <label htmlFor=\"qa\" className=\"text-sm cursor-pointer\">\n                  Q&A (Question & Answer)\n                </label>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Checkbox\n                  id=\"cloze\"\n                  checked={cardTypes.cloze}\n                  onCheckedChange={(checked) => setCardTypes({ ...cardTypes, cloze: checked as boolean })}\n                  data-testid=\"checkbox-cloze\"\n                />\n                <label htmlFor=\"cloze\" className=\"text-sm cursor-pointer\">\n                  Cloze Deletion (Fill in the blank)\n                </label>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Checkbox\n                  id=\"reverse\"\n                  checked={cardTypes.reverse}\n                  onCheckedChange={(checked) => setCardTypes({ ...cardTypes, reverse: checked as boolean })}\n                  data-testid=\"checkbox-reverse\"\n                />\n                <label htmlFor=\"reverse\" className=\"text-sm cursor-pointer\">\n                  Reverse (Bidirectional)\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label>Content Coverage (Granularity)</Label>\n              <span className=\"text-sm text-muted-foreground\">{granularity[0]}/7</span>\n            </div>\n            <Slider\n              value={granularity}\n              onValueChange={setGranularity}\n              min={1}\n              max={7}\n              step={1}\n              className=\"w-full\"\n              data-testid=\"slider-granularity\"\n            />\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>Core principles</span>\n              <span>Every detail</span>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"customInstructions\">Custom Instructions (Optional)</Label>\n            <Textarea\n              id=\"customInstructions\"\n              value={customInstructions}\n              onChange={(e) => setCustomInstructions(e.target.value)}\n              placeholder=\"e.g., Focus on clinical applications, include mnemonics...\"\n              rows={3}\n              data-testid=\"textarea-custom-instructions\"\n            />\n          </div>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateMutation.isPending}\n              data-testid=\"button-save-settings\"\n            >\n              {updateMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                \"Save Changes\"\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7702},"client/src/lib/authUtils.ts":{"content":"// From blueprint:javascript_log_in_with_replit\n// Handle unauthorized errors by redirecting to login\nexport function handleUnauthorized(error: any) {\n  if (error?.message?.includes('Unauthorized') || error?.status === 401) {\n    window.location.href = '/api/login';\n  }\n}\n","size_bytes":273},"server/audioExtractor.ts":{"content":"import { spawn } from 'child_process';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport { randomUUID } from 'crypto';\nimport OpenAI from 'openai';\nimport { createReadStream } from 'fs';\nimport { unlink } from 'fs/promises';\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\n/**\n * Download audio from YouTube video using yt-dlp\n * Returns path to the downloaded audio file (mp3 format)\n */\nexport async function downloadYouTubeAudio(videoId: string): Promise<string> {\n  const tempDir = tmpdir();\n  const audioFileName = `youtube-audio-${videoId}-${randomUUID()}.mp3`;\n  const audioPath = join(tempDir, audioFileName);\n\n  return new Promise((resolve, reject) => {\n    const ytdlp = spawn('yt-dlp', [\n      '-x', // Extract audio\n      '--audio-format', 'mp3',\n      '--audio-quality', '5', // Good quality but not huge file\n      '-o', audioPath,\n      `https://www.youtube.com/watch?v=${videoId}`\n    ]);\n\n    let errorOutput = '';\n    ytdlp.stderr.on('data', (data) => {\n      errorOutput += data.toString();\n    });\n\n    ytdlp.on('close', (code) => {\n      if (code === 0) {\n        resolve(audioPath);\n      } else {\n        reject(new Error(`yt-dlp failed with code ${code}: ${errorOutput}`));\n      }\n    });\n\n    ytdlp.on('error', (err) => {\n      reject(err);\n    });\n  });\n}\n\n/**\n * Transcribe audio file using OpenAI Whisper API\n * Returns the transcribed text\n */\nexport async function transcribeAudioWithWhisper(audioPath: string): Promise<string> {\n  try {\n    const audioReadStream = createReadStream(audioPath);\n\n    const transcription = await openai.audio.transcriptions.create({\n      file: audioReadStream,\n      model: 'whisper-1',\n      response_format: 'text'\n    });\n\n    return transcription;\n  } catch (error: any) {\n    console.error('Whisper transcription error:', error);\n    throw new Error(`Failed to transcribe audio: ${error.message || error}`);\n  }\n}\n\n/**\n * Download YouTube audio and transcribe it using Whisper\n * Cleans up the temporary audio file after transcription\n */\nexport async function transcribeYouTubeVideo(videoId: string): Promise<string> {\n  let audioPath: string | null = null;\n\n  try {\n    console.log(`Downloading audio for video ${videoId}...`);\n    audioPath = await downloadYouTubeAudio(videoId);\n    \n    console.log(`Audio downloaded to ${audioPath}, transcribing with Whisper...`);\n    const transcript = await transcribeAudioWithWhisper(audioPath);\n    \n    console.log(`Transcription complete, ${transcript.length} characters`);\n    return transcript;\n  } finally {\n    // Clean up temp audio file\n    if (audioPath) {\n      try {\n        await unlink(audioPath);\n        console.log(`Cleaned up temp audio file: ${audioPath}`);\n      } catch (cleanupError) {\n        console.error(`Failed to cleanup audio file ${audioPath}:`, cleanupError);\n      }\n    }\n  }\n}\n","size_bytes":2991},"server/supabaseAuth.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport type { Express, RequestHandler } from 'express';\nimport { storage } from './storage';\n\nconst supabaseUrl = process.env.SUPABASE_URL!;\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY!;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase credentials: SUPABASE_URL and SUPABASE_ANON_KEY are required');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Middleware to check if user is authenticated\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  const token = authHeader.substring(7);\n\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    \n    if (error || !user) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    // Attach user to request object\n    (req as any).user = user;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n};\n\nexport function setupAuth(app: Express) {\n  // Signup route\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ error: 'Email and password are required' });\n      }\n\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: firstName,\n            last_name: lastName,\n          },\n        },\n      });\n\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n\n      // Create user record in our database\n      if (data.user) {\n        try {\n          await storage.createUser({\n            id: data.user.id,\n            email: email,\n            firstName: firstName,\n            lastName: lastName,\n          });\n        } catch (dbError) {\n          console.error('❌ CRITICAL: Failed to create user in database:', dbError);\n          console.error('User was created in Supabase Auth but NOT in database - orphaned user!');\n          console.error('User ID:', data.user.id);\n          console.error('Email:', email);\n          \n          // Note: Cannot rollback Supabase Auth user without service-role key\n          // User will exist in Auth but not in database - they won't be able to use the app\n          \n          return res.status(500).json({ \n            error: 'Failed to complete user registration. Please contact support with this error.' \n          });\n        }\n      }\n\n      res.json({ \n        user: data.user,\n        session: data.session,\n      });\n    } catch (error) {\n      console.error('Signup error:', error);\n      res.status(500).json({ error: 'Failed to sign up' });\n    }\n  });\n\n  // Login route\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ error: 'Email and password are required' });\n      }\n\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return res.status(400).json({ error: error.message });\n      }\n\n      // Ensure user exists in our database (for users who signed up before sync was added)\n      if (data.user) {\n        try {\n          const existingUser = await storage.getUser(data.user.id);\n          if (!existingUser) {\n            await storage.createUser({\n              id: data.user.id,\n              email: data.user.email || '',\n              firstName: data.user.user_metadata?.first_name,\n              lastName: data.user.user_metadata?.last_name,\n            });\n          }\n        } catch (dbError) {\n          console.error('Failed to sync user to database:', dbError);\n          // Continue anyway - user exists in Supabase\n        }\n      }\n\n      res.json({\n        user: data.user,\n        session: data.session,\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: 'Failed to log in' });\n    }\n  });\n\n  // Logout route\n  app.post('/api/auth/logout', async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      \n      if (authHeader && authHeader.startsWith('Bearer ')) {\n        const token = authHeader.substring(7);\n        await supabase.auth.admin.signOut(token);\n      }\n\n      res.json({ message: 'Logged out successfully' });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ error: 'Failed to log out' });\n    }\n  });\n\n  // Get current user route\n  app.get('/api/auth/user', async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      \n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return res.status(401).json({ message: 'Unauthorized' });\n      }\n\n      const token = authHeader.substring(7);\n      const { data: { user }, error } = await supabase.auth.getUser(token);\n\n      if (error || !user) {\n        return res.status(401).json({ message: 'Unauthorized' });\n      }\n\n      res.json({\n        id: user.id,\n        email: user.email,\n        firstName: user.user_metadata?.first_name,\n        lastName: user.user_metadata?.last_name,\n        profileImageUrl: user.user_metadata?.avatar_url,\n      });\n    } catch (error) {\n      console.error('Get user error:', error);\n      res.status(401).json({ message: 'Unauthorized' });\n    }\n  });\n}\n","size_bytes":5671},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { supabase } from \"@/lib/supabase\";\nimport { useEffect } from \"react\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: session, isLoading } = useQuery({\n    queryKey: [\"session\"],\n    queryFn: async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      return session;\n    },\n    retry: false,\n  });\n\n  // Listen for auth state changes\n  useEffect(() => {\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      queryClient.setQueryData([\"session\"], session);\n    });\n\n    return () => subscription.unsubscribe();\n  }, [queryClient]);\n\n  const user = session?.user ? {\n    id: session.user.id,\n    email: session.user.email,\n    firstName: session.user.user_metadata?.first_name,\n    lastName: session.user.user_metadata?.last_name,\n    profileImageUrl: session.user.user_metadata?.avatar_url,\n  } : null;\n\n  return {\n    user,\n    session,\n    isLoading,\n    isAuthenticated: !!session,\n  };\n}\n","size_bytes":1091},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n","size_bytes":347}},"version":2}